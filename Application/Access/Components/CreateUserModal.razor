@using Application.Access.Forms
@using Application.Access.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Microsoft.EntityFrameworkCore
@inject UserManager<User> UserManager
@inject IStringLocalizer StringLocalizer
@inject RoleManager<Role> RoleManager

<button type="button" class="btn btn-primary" @onclick="OnOpenAsync">
    Создать пользователя
</button>

@if (Visible)
{
    <PageTitle>Создать пользователя</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Создать пользователя</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        @if (!string.IsNullOrEmpty(IdentityError))
                        {
                            <p class="alert-danger">@IdentityError</p>
                        }
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MyInputComponent Label="Имя пользователя" @bind-Value="@Form.Login" ValidationFor="() => Form.Login"/>
                        <MyInputComponent Label="Электронная почта" @bind-Value="@Form.Email" ValidationFor="() => Form.Email"/>
                        <MyInputComponent Label="Фамилия" @bind-Value="@Form.FamilyName" ValidationFor="() => Form.FamilyName"/>
                        <MyInputComponent Label="Имя" @bind-Value="@Form.FirstName" ValidationFor="() => Form.FirstName"/>
                        <MyInputComponent Label="Отчество" @bind-Value="@Form.SurName" ValidationFor="() => Form.SurName"/>
                        <MyInputComponent Type="password" Label="Пароль" @bind-Value="@Form.Password" ValidationFor="() => Form.Password"/>
                        <MyInputComponent Type="password" Label="Подтвердите пароль" @bind-Value="@Form.ConfirmPassword" ValidationFor="() => Form.ConfirmPassword"/>
                        <MyCheckboxGroup TCheck="string" Label="Роли" @bind-Value="@Form.RoleNames" Options="AllRoles"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Создать</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public string IdentityError { get; set; } = string.Empty;

    public CreateUserForm Form { get; set; }

    public EditContext EditContext { get; set; }

    public bool Visible { get; set; }

    public Dictionary<string, OptionItem<string>> AllRoles { get; set; } = new();

    public CreateUserModal()
    {
        Form = new CreateUserForm();
        EditContext = new EditContext(Form);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnCancel()
    {
        Visible = false;
        Form = new CreateUserForm();
        EditContext = new EditContext(Form);
    }

    private async Task OnOpenAsync()
    {
        var roles = await RoleManager.Roles.ToListAsync();
        AllRoles = roles.Select(x => new OptionItem<string>(StringLocalizer[x.Name], x.Name, false)).ToDictionary(x => x.Value);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible || !EditContext.Validate())
            return;
        var user = new User
        {
            UserName = Form.Login,
            Email = Form.Email,
            FirstName = Form.FirstName,
            FamilyName = Form.FirstName,
            SurName = Form.FirstName
        };
        var userPasswordHash = UserManager.PasswordHasher.HashPassword(user, Form.Password);
        user.PasswordHash = userPasswordHash;
        var result = await UserManager.CreateAsync(user);
        if (!result.Succeeded)
        {
            IdentityError = result.GetErrorsString();
            return;
        }
        var rolesResult = await UserManager.AddToRolesAsync(user, Form.RoleNames);
        if (!rolesResult.Succeeded)
        {
            await UserManager.DeleteAsync(user);
            IdentityError = result.GetErrorsString();
            return;
        }

        OnCancel();
    }
}