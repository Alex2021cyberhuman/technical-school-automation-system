@page "/applicants/create"
@using Application.AdmissionCommittee.Forms
@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore
@using Application.AdmissionCommittee.Data
@using Application.AdmissionCommittee.Services.StatementDocument
@using Application.Common.Enums
@using Blazored.LocalStorage
@inject IDbContextFactory<AdmissionCommitteeDbContext> DbContextFactory
@inject ILocalStorageService LocalStorageService
@inject IConfiguration Configuration
@inject StatementDocumentCreator StatementDocumentCreator
@inject ILogger<ApplicantCreatePage> Logger

<PageTitle>Заполнить данные абитуриента</PageTitle>
<h3>Данные абитуриента</h3>
<EditForm EditContext="EditContext"
          OnValidSubmit="OnSubmitAsync">
    @* <FluentValidationValidator DisableAssemblyScanning="true"/> *@
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputText @bind-Value="@Form.FamilyName" placeholder="Фамилия"/>
    <InputText @bind-Value="@Form.FirstName" placeholder="Имя"/>
    <InputText @bind-Value="@Form.SurName" placeholder="Отчество"/>
    <InputDate @bind-Value="@Form.DateOfBirth" placeholder="Дата рождения"/>
    <InputText @bind-Value="@Form.PassportType" placeholder="Тип паспорта"/>
    <InputText @bind-Value="@Form.PassportSerial" placeholder="Серия паспорта"/>
    <InputText @bind-Value="@Form.PassportNumber" placeholder="Номер паспорта"/>
    <InputText @bind-Value="@Form.PassportIssuer" placeholder="Кем выдан паспорт"/>
    <InputText @bind-Value="@Form.PassportIssuerCode" placeholder="Код паспорта"/>
    <InputDate @bind-Value="@Form.PassportIssueDate" placeholder="Дата выдачи паспорта"/>
    <InputText @bind-Value="@Form.Address" placeholder="Место жительства"/>
    <InputText @bind-Value="@Form.PostalCode" placeholder="Почтовый индекс"/>
    <InputText @bind-Value="@Form.Phone" placeholder="Мобильный телефон"/>
    <InputText @bind-Value="@Form.Description" placeholder="Дополнительные свединия"/>
    <InputNumber @bind-Value="@Form.LanguageRating" placeholder="Баллы по русскому языку"/>
    <InputNumber @bind-Value="@Form.MathRating" placeholder="Баллы по математике"/>
    <InputNumber @bind-Value="@Form.AverageAttestRating" placeholder="Средний бал по атестату"/>
    <MyEnumInputRadioGroup Label="Тип базового обучения" @bind-Value="@Form.EducationType" TValue="EducationType"/>
    <InputText @bind-Value="@Form.EducationDescription" placeholder="Учебное заведение"/>
    <InputText @bind-Value="@Form.EducationDocumentSerial" placeholder="Серия документа об образовании"/>
    <InputText @bind-Value="@Form.EducationDocumentNumber" placeholder="Номер документа об образовании"/>
    <InputDate @bind-Value="@Form.EducationDocumentIssued" placeholder="Дата выдачи документа об образовании"/>
    <MyEnumInputRadioGroup Label="Форма обучения" @bind-Value="@Form.EducationForm" TValue="EducationForm"/>
    <MyInputCheckBox Label="Первый раз в техникуме" @bind-Value="@Form.FirstTimeInTechnicalSchool"/>
    <MyInputCheckBox Label="Нужно общежитие" @bind-Value="@Form.NeedDormitory"/>
    <MyEnumInputRadioGroup Label="Тип финансирования" @bind-Value="@Form.FinanceEducationType" TValue="FinanceEducationType"/>
    <MyInputCheckBox Label="Есть мать" @bind-Value="@Form.HasMother"/>
    @if (Form.EducationForm == EducationForm.FullTime)
    {
        @if (Form.HasMother)
        {
            <InputText @bind-Value="@Form.MotherFirstName" placeholder="Имя матери"/>
            <InputText @bind-Value="@Form.MotherFamilyName" placeholder="Фамилия матери"/>
            <InputText @bind-Value="@Form.MotherSurName" placeholder="Отчество матери"/>
            <InputText @bind-Value="@Form.MotherWorkDescription" placeholder="Описание работы матери"/>
            <InputText @bind-Value="@Form.MotherMobilePhone" placeholder="Мобильный телефон матери"/>
            <InputText @bind-Value="@Form.MotherWorkPhone" placeholder="Рабочий телефон матери"/>
            <InputText @bind-Value="@Form.MotherHomePhone" placeholder="Домашний телефон матери"/>
        }
        <MyInputCheckBox Label="Есть отец" @bind-Value="@Form.HasFather"/>
        @if (Form.HasFather)
        {
            <InputText @bind-Value="@Form.FatherFirstName" placeholder="Имя отца"/>
            <InputText @bind-Value="@Form.FatherFamilyName" placeholder="Фамилия отца"/>
            <InputText @bind-Value="@Form.FatherSurName" placeholder="Отчество отца"/>
            <InputText @bind-Value="@Form.FatherWorkDescription" placeholder="Описание работы отца"/>
            <InputText @bind-Value="@Form.FatherMobilePhone" placeholder="Мобильный телефон отца"/>
            <InputText @bind-Value="@Form.FatherWorkPhone" placeholder="Рабочий телефон отца"/>
            <InputText @bind-Value="@Form.FatherHomePhone" placeholder="Домашний телефон отца"/>
        }
    }
    else
    {
        <InputText @bind-Value="@Form.DistanceApplicantWorkDescription" placeholder="Описание работы"/>
    }
    <MyCheckboxGroup TCheck="long" Options="@SpecialityIdsOptions" @bind-Value="@Form.SelectedSpecialityIds"/>
    <button class="btn btn-primary" type="submit" disabled="@IsValid"></button>
</EditForm>

@code {

    public ApplicantCreatePage()
    {
        EditContext = new EditContext(Form);
    }

    public bool IsValid { get; set; }

    public Dictionary<long, Speciality> Specialities { get; set; } = new();

    public ApplicantForm Form { get; set; } = new();

    public EditContext EditContext { get; set; }

    public bool LocalStorageChecked { get; set; }

    public Dictionary<long, MyCheckboxGroup<long>.OptionItem> SpecialityIdsOptions => Specialities.Values.Select(x =>
        new MyCheckboxGroup<long>.OptionItem(
            $"{x.Code} {x.Name}",
            x.Id,
            Form.SelectedSpecialityIds.Contains(x.Id)))
        .ToDictionary(x => x.Value);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Specialities = await context.Speciality.OrderBy(x => x.Code).ThenBy(x => x.Name).ToDictionaryAsync(x => x.Id);
        EditContext.OnFieldChanged += EditContextOnOnFieldChanged;

        await Task.Delay(100);
        try
        {
            if (!LocalStorageChecked)
            {
                if (await LocalStorageService.ContainKeyAsync("ACP_LS"))
                {
                    EditContext.OnFieldChanged -= EditContextOnOnFieldChanged;

                    Form = await LocalStorageService.GetItemAsync<ApplicantForm>("ACP_LS");
                    EditContext = new EditContext(Form);

                    EditContext.OnFieldChanged += EditContextOnOnFieldChanged;
                    LocalStorageChecked = true;
                }
            }
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in server side client executing");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void EditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        try
        {
            IsValid = EditContext.Validate();
            await LocalStorageService.SetItemAsync("ACP_LS", Form);
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in server side client executing");
        }
    }

    private async Task OnSubmitAsync()
    {
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            await using var transaction = await context.Database.BeginTransactionAsync();
            var specialities = await context.Speciality.ToDictionaryAsync(x => x.Id);
            var applicant = Form.ConvertToApplicant(specialities);
            context.Add(applicant);
            await context.SaveChangesAsync();
            var statementDocumentModel = new StatementDocumentModel(applicant, specialities.Values);
            var basePath = Configuration["AdmissionCommittee:StatementPath"];
            var fileName = $"Заявление_На_Зачисление_{statementDocumentModel.Now.ToString("yyyyMMddHHmmss")}_{applicant.Id}.docx";
            var fullFileName = Path.Combine(basePath, fileName);
            var size = await StatementDocumentCreator.CreatePackageAsync(fullFileName, statementDocumentModel);
            var statement = new Statement()
            {
                Name = fileName,
                Size = size
            };
            applicant.Statement = statement;
            await context.SaveChangesAsync();
            await transaction.CommitAsync();
            EditContext.OnFieldChanged -= EditContextOnOnFieldChanged;
            await LocalStorageService.RemoveItemAsync("ACP_LS");
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in server side client executing");
        }
    }

}