@page "/applicants/create"
@using Microsoft.EntityFrameworkCore
@using Application.AdmissionCommittee.Data
@using Application.AdmissionCommittee.Services.StatementDocument
@using Blazored.LocalStorage
@inject IDbContextFactory<AdmissionCommitteeDbContext> DbContextFactory
@inject ILocalStorageService LocalStorageService
@inject IConfiguration Configuration
@inject StatementDocumentCreator StatementDocumentCreator
@inject ILogger<ApplicantCreatePage> Logger
@inject NavigationManager NavigationManager
<PageTitle>Данные абитуриентов</PageTitle>
<h3>Абитуриенты</h3>

@if (!Loading)
{
    <div class="row">
        <div class="col-12 col-md-4">
            <MyInputRadioGroup @bind-Value="SelectedSpecialityId" RadioItems="SpecialityRadioItems" Label="Специальность" OnChange="ApplyFilterAsync"/>
            <MyInputRadioGroup @bind-Value="SelectedYear" RadioItems="YearRadioItems" Label="Год" OnChange="ApplyFilterAsync"/>
        </div>
        <div class="col-12 col-md-8">
            <table>
                <thead>
                <tr></tr>
                </thead>
            </table>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {

    public long SelectedSpecialityId { get; set; }

    public List<MyInputRadioGroup<long>.ValueRadioItem> SpecialityRadioItems { get; set; } = new();

    public int SelectedYear { get; set; }

    public List<MyInputRadioGroup<int>.ValueRadioItem> YearRadioItems { get; set; } = new();

    public bool Loading { get; set; } = true;

    public List<Applicant> Applicants { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var specialities = (await context.Speciality.OrderBy(x => x.Code).ThenBy(x => x.Name)
            .ToListAsync())
            .Select(x => new MyInputRadioGroup<long>.ValueRadioItem($"{x.Code} {x.Name}", x.Id))
            .ToList();
        SpecialityRadioItems = specialities;
        SelectedSpecialityId = specialities.First().Value;
        var years = (await context.Applicant.Select(x => x.Submitted.Year).Distinct()
            .OrderByDescending(x => x)
            .ToListAsync())
            .Select(x => new MyInputRadioGroup<int>.ValueRadioItem(x.ToString(), x))
            .ToList();
        YearRadioItems = years;
        SelectedYear = years.First().Value;
        await LoadApplicantsAsync();
        Loading = false;
    }

    private async Task LoadApplicantsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Applicants = await context.Applicant
            .Where(x => x.ApplicantSpecialities.Any(
                speciality => speciality.SpecialityId == SelectedSpecialityId) &&
                        x.Submitted.Year == SelectedYear)
            .ToListAsync();
    }

    private async Task ApplyFilterAsync()
    {
        Loading = true;
        await LoadApplicantsAsync();
        Loading = false;
    }

}