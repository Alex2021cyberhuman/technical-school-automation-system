@page "/applicants"
@attribute [Authorize(Policy = PolicyIdentifiers.AdmissionCommittee)]
@using Microsoft.EntityFrameworkCore
@using Application.AdmissionCommittee.Data
@using Application.AdmissionCommittee.Forms
@using Application.AdmissionCommittee.Services.ApplicantsTable
@using Application.Common.Enums
@using Application.Specialities.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using Application.Access.Enums
@using Application.Data
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject ILogger<ApplicantCreatePage> Logger
@inject IStringLocalizer StringLocalizer
@inject NavigationManager NavigationManager
@inject ApplicantsTableCreator ApplicantsTableCreator
@inject IConfiguration Configuration
<PageTitle>Данные абитуриентов</PageTitle>
<h3>Абитуриенты</h3>

<div class="row">
    <div class="col-12 col-md-4">
        <EditForm EditContext="FilterContext">
            <MyInputRadioGroup @bind-Value="ApplicantsTableFilterForm.SelectedSpecialityId" RadioItems="ApplicantsTableFilterForm.SpecialityRadioItems" Label="Специальность"/>
            <MyInputRadioGroup @bind-Value="ApplicantsTableFilterForm.SelectedYear" RadioItems="ApplicantsTableFilterForm.YearRadioItems" Label="Год"/>
            <MyInputRadioGroup @bind-Value="ApplicantsTableFilterForm.SelectedEducationForm" RadioItems="ApplicantsTableFilterForm.EducationForms" Label="Форма обучения"/>
            <MyInputRadioGroup @bind-Value="ApplicantsTableFilterForm.SelectedFinanceType" RadioItems="ApplicantsTableFilterForm.FinanceTypes" Label="Форма обучения"/>
        </EditForm>
        <button type="button" class="btn btn-primary" @onclick="OnDownloadApplicantsTableAsync">Скачать сводную таблицу из текущих данных</button>
    </div>
    <div class="col-12 col-md-8">
        <table class="table">
            <thead>
            <tr>
                <td rowspan="2">№ п.п.</td>
                <td rowspan="2">ФИО</td>
                <td rowspan="2">Образование</td>
                <td colspan="2">Результаты ГИА</td>
                <td rowspan="2">Средний балл</td>
                <td rowspan="2">Общая оценка</td>
                <td rowspan="2">Примечание</td>
                <td rowspan="2">Решение директора</td>
                <td rowspan="2"></td>
            </tr>
            <tr>
                <td>Русский Язык</td>
                <td>Математика</td>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Applicants)
            {
                <tr>
                    <th scope="row">@item.Id</th>
                    <td>@item.FullName</td>
                    <td>
                        <div class="hint-information" data-name="Базовое образование: @item.EducationDescription, Год: @item.EducationDocumentIssued.Year.">
                            @(StringLocalizer[item.EducationType.ToString()])
                        </div>
                    </td>
                    <td>@item.LanguageRating</td>
                    <td>@item.MathRating</td>
                    <td>@item.AverageAttestRating</td>
                    <td>@item.CommonScore</td>
                    <td>@item.Description</td>
                    <td>@(StringLocalizer[item.DirectorDecision.ToString()])</td>
                    <td>
                        <DownloadApplicantStatementButton ApplicantId="@item.Id"/>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {

    public List<Applicant> Applicants { get; set; } = new();

    public ApplicantsTableFilterForm ApplicantsTableFilterForm { get; set; } = new();

    public EditContext FilterContext { get; set; }

    public CancellationTokenSource EditCancellationTokenSource { get; set; } = new();

    public List<Speciality> Specialities { get; set; } = new();

    public ApplicantsListPage()
    {
        FilterContext = new EditContext(ApplicantsTableFilterForm);
        FilterContext.OnFieldChanged += ApplyFilterAsync;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Specialities = await context.Speciality.OrderBy(x => x.Code).ThenBy(x => x.Name)
            .AsNoTracking()
            .ToListAsync();

        ApplicantsTableFilterForm.SpecialityRadioItems = Specialities
            .Select(x => new ValueRadioItem<long>($"{x.Code} {x.Name}", x.Id))
            .ToList();

        ApplicantsTableFilterForm.SelectedSpecialityId = Specialities.First().Id;
        var years = await GetStartYear(context);
        ApplicantsTableFilterForm.YearRadioItems = years;
        ApplicantsTableFilterForm.SelectedYear = years.First().Value;
        ApplicantsTableFilterForm.EducationForms = Enum.GetValues<EducationForm>()
            .Select(x => new ValueRadioItem<EducationForm>(StringLocalizer[x.ToString()], x))
            .ToList();
        ApplicantsTableFilterForm.EducationForms = Enum.GetValues<EducationForm>()
            .Select(x => new ValueRadioItem<EducationForm>(StringLocalizer[x.ToString()], x))
            .ToList();
        await LoadApplicantsAsync();
    }

    private static async Task<List<ValueRadioItem<int>>> GetStartYear(MainDbContext context)
    {
        var startYear = (await context.Applicant.OrderBy(x => x.Submitted).Select(x => x.Submitted).FirstOrDefaultAsync())
            .Year;
        var currentYear = DateTime.Today.Year;
        startYear = startYear == default ? currentYear : startYear;
        var years = Enumerable.Range(
            startYear,
            currentYear - startYear + 1)
            .Select(
                x => new ValueRadioItem<int>(x.ToString(), x))
            .ToList();
        return years;
    }

    private async Task LoadApplicantsAsync(CancellationToken cancellationToken = default)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync(cancellationToken);
        Applicants = await context.Applicant
            .Where(x =>
                x.EducationForm == ApplicantsTableFilterForm.SelectedEducationForm &&
                x.ApplicantSpecialities.Any(
                    speciality => speciality.SpecialityId == ApplicantsTableFilterForm.SelectedSpecialityId) &&
                x.Submitted.Year == ApplicantsTableFilterForm.SelectedYear)
            .AsNoTracking()
            .ToListAsync(cancellationToken);
        StateHasChanged();
    }

    private async void ApplyFilterAsync(object? sender, FieldChangedEventArgs fieldChangedEventArgs)
    {
        try
        {
            EditCancellationTokenSource.Cancel();
            EditCancellationTokenSource = new CancellationTokenSource();
            await LoadApplicantsAsync(EditCancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine();
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in async void method");
        }
    }

    private async Task OnDownloadApplicantsTableAsync()
    {
        var basePath = Configuration["AdmissionCommittee:ApplicantsTablePath"];
        var fileName = $"Сводная_Абитуриентов_{DateTime.Now.ToString("yyyyMMddHHmmss")}_{Path.GetRandomFileName()}.xlsx";
        var fullFileName = Path.Combine(basePath, fileName);
        var model = new ApplicantsTableModel(Applicants, Specialities.First(x => x.Id == ApplicantsTableFilterForm.SelectedSpecialityId), StringLocalizer);
        _ = await ApplicantsTableCreator.CreatePackageAsync(fullFileName, model);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + fileName, true);
    }

}