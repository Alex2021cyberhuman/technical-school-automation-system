@page "/applicants"
@attribute [Authorize(Policy = PolicyIdentifiers.AdmissionCommittee)]
@using Microsoft.EntityFrameworkCore
@using Application.AdmissionCommittee.Data
@using Application.AdmissionCommittee.Forms
@using Application.AdmissionCommittee.Services.ApplicantsTable
@using Application.Common.Enums
@using Application.Specialities.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using Application.Access.Enums
@using Application.Data
@using System.Security.Claims
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject ILogger<ApplicantCreatePage> Logger
@inject IStringLocalizer StringLocalizer
@inject NavigationManager NavigationManager
@inject ApplicantsTableCreator ApplicantsTableCreator
@inject IConfiguration Configuration
@inject IDialogService DialogService
<PageTitle>Данные абитуриентов</PageTitle>
<h3>Абитуриенты</h3>

<div class="container">
    <div class="row">
        <EditForm EditContext="FilterContext">
            <MyYearSelector @bind-Value="Filter.SelectedYear"/>
            <MudTextField @bind-Value="Filter.SearchString"/>
            <MyEnumSelector TValue="EducationForm" @bind-Value="@Filter.SelectedEducationForm" Label="Форма обучения"/>
            <MyEnumSelector TValue="FinanceEnrolmentType" @bind-Value="@Filter.SelectedFinanceEnrolmentType" Label="Форма финансирования"/>
            <MyEnumSelector TValue="DirectorDecisionType" @bind-Value="@Filter.SelectedDirectorDecisionType" Label="Решение директора"/>
            <MyInputRadioGroup TValue="long?" @bind-Value="@Filter.SelectedSpecialityId" RadioItems="@Filter.SpecialityRadioItems" Label="Специальность"/>
            <MudButton OnClick="() => Filter.Reset()">Все</MudButton>
        </EditForm>
        <button type="button" class="btn btn-primary" @onclick="OnDownloadApplicantsTableAsync">Скачать сводную таблицу из текущих данных</button>
        <a href="/applicants/create" class="btn btn-secondary">На страницу заполнения данных</a>
    </div>
    <div class="row">
        <MudTable T="Applicant" ServerData="LoadApplicantsFromDatabase" @ref="ApplicantsTable">
            <HeaderContent>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="Id">№</MudTableSortLabel>
                </MudTd>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="FullName">ФИО</MudTableSortLabel>
                </MudTd>
                <MudTd>Образование</MudTd>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="MathRating">Баллы по математике</MudTableSortLabel>
                </MudTd>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="LanguageRating">Баллы по русскому языку</MudTableSortLabel>
                </MudTd>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="AverageAttestRating">Средний балл</MudTableSortLabel>
                </MudTd>
                <MudTd>
                    <MudTableSortLabel T="Applicant" SortLabel="CommonScore">Общая оценка</MudTableSortLabel>
                </MudTd>
                <MudTd>Примечание</MudTd>
                <MudTd>Решение директора</MudTd>
                <MudTd></MudTd>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.FullName</MudTd>
                <MudTd>
                    <div class="hint-information" data-name="Базовое образование: @context.EducationDescription, Год: @context.EducationDocumentIssued.Year.">
                        @(StringLocalizer[context.EducationType.ToString()])
                    </div>
                </MudTd>
                <MudTd>@context.LanguageRating</MudTd>
                <MudTd>@context.MathRating</MudTd>
                <MudTd>@context.AverageAttestRating</MudTd>
                <MudTd>@context.CommonScore</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@(StringLocalizer[context.DirectorDecision.ToString()])</MudTd>
                <MudTd>
                    @if (CurrentUser.IsInRole(RoleIdentifiers.AssociateDirector) || CurrentUser.IsInRole(RoleIdentifiers.Director))
                    {
                        <MudIconButton Icon="@Icons.Filled.Delete" Title="Удалить" OnClick="@(async () => await DeleteApplicantAsync(context))"/>
                    }
                    <DownloadApplicantStatementButton ApplicantId="@context.Id"/>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[] { 100 }"/>
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {

    public ApplicantsTableFilterForm Filter { get; set; } = new();

    public EditContext FilterContext { get; set; }

    public List<Speciality> Specialities { get; set; } = new();

    public MudTable<Applicant>? ApplicantsTable { get; set; }

    private ClaimsPrincipal CurrentUser { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    public ApplicantsListPage()
    {
        FilterContext = new EditContext(Filter);
        FilterContext.OnFieldChanged += ApplyFilterAsync;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Specialities = await context.Speciality.OrderBy(x => x.Code).ThenBy(x => x.Name)
            .AsNoTracking()
            .ToListAsync();

        Filter.SpecialityRadioItems = Specialities
            .Select(x => new ValueRadioItem<long?>($"{x.Code} {x.Name}", x.Id))
            .ToList();
        CurrentUser = (await AuthenticationStateTask).User;
        await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void ApplyFilterAsync(object? sender, FieldChangedEventArgs fieldChangedEventArgs)
    {
        try
        {
            await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in async void method");
        }
    }

    private async Task OnDownloadApplicantsTableAsync()
    {
        if (ApplicantsTable is null || ApplicantsTable.TotalItems <= 0)
        {
            return;
        }
        var basePath = Configuration["AdmissionCommittee:ApplicantsTablePath"];
        var fileName = $"Сводная_Абитуриентов_{DateTime.Now.ToString("yyyyMMddHHmmss")}_{Path.GetRandomFileName()}.xlsx";
        var fullFileName = Path.Combine(basePath, fileName);
        var model = new ApplicantsTableModel(ApplicantsTable.Items, Specialities.First(x => x.Id == Filter.SelectedSpecialityId), StringLocalizer);
        _ = await ApplicantsTableCreator.CreatePackageAsync(fullFileName, model);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + fileName, true);
    }

    private async Task<TableData<Applicant>> LoadApplicantsFromDatabase(TableState tableState)
    {
        var page = tableState.Page;
        var pageSize = tableState.PageSize;
        var sortDirection = tableState.SortDirection;
        var sortLabel = tableState.SortLabel;
        var (items, totalItems) = await DbContextFactory.LoadApplicantPagesAsync(sortLabel, sortDirection, page, pageSize, Filter);

        var tableData = new TableData<Applicant>()
        {
            Items = items,
            TotalItems = totalItems
        };
        return tableData;
    }


    private async Task DeleteApplicantAsync(Applicant applicant)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var dbApplicant = await context.Applicant
            .Include(x => x.Student)
            .ThenInclude(x => x!.Group)
            .FirstOrDefaultAsync(x => x.Id == applicant.Id);
        if (dbApplicant is null)
        {
            return;
        }

        if (dbApplicant.Student != null)
        {
            _ = await DialogService.ShowMessageBox("Удаление", $"Невозможно удалить данные зачисленного студента группы {dbApplicant.Student.Group.Name} {dbApplicant.FullName}! Сначала должно идти отчисление на странице этой группы.");
        }

        var deleteApplicant = await DialogService.ShowMessageBox("Удаление", $"Вы хотите удалить данные абитуриента {dbApplicant.FullName}?", "Да", "Нет");
        if (!deleteApplicant.HasValue || !deleteApplicant.Value)
        {
            return;
        }
        context.Remove(dbApplicant);
        await context.SaveChangesAsync();
        await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
    }

}