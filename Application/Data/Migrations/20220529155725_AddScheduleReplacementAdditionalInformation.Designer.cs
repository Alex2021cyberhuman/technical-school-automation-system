// <auto-generated />
using System;
using Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20220529155725_AddScheduleReplacementAdditionalInformation")]
    partial class AddScheduleReplacementAdditionalInformation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Access.Data.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Application.Access.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("SurName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sur_name");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Application.Access.Data.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Application.AdmissionCommittee.Data.Applicant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("address");

                    b.Property<decimal>("AverageAttestRating")
                        .HasColumnType("numeric")
                        .HasColumnName("average_attest_rating");

                    b.Property<decimal>("CommonScore")
                        .HasColumnType("numeric")
                        .HasColumnName("common_score");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("DirectorDecision")
                        .HasColumnType("integer")
                        .HasColumnName("director_decision");

                    b.Property<string>("DistanceApplicantWorkDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("distance_applicant_work_description");

                    b.Property<string>("EducationDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("education_description");

                    b.Property<DateTime>("EducationDocumentIssued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("education_document_issued");

                    b.Property<string>("EducationDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("education_document_number");

                    b.Property<string>("EducationDocumentSerial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("education_document_serial");

                    b.Property<int>("EducationForm")
                        .HasColumnType("integer")
                        .HasColumnName("education_form");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer")
                        .HasColumnName("education_type");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("family_name");

                    b.Property<int>("FinanceEducationType")
                        .HasColumnType("integer")
                        .HasColumnName("finance_education_type");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<bool>("FirstTimeInTechnicalSchool")
                        .HasColumnType("boolean")
                        .HasColumnName("first_time_in_technical_school");

                    b.Property<decimal>("LanguageRating")
                        .HasColumnType("numeric")
                        .HasColumnName("language_rating");

                    b.Property<decimal>("MathRating")
                        .HasColumnType("numeric")
                        .HasColumnName("math_rating");

                    b.Property<bool>("NeedDormitory")
                        .HasColumnType("boolean")
                        .HasColumnName("need_dormitory");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<DateTime>("Submitted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted");

                    b.Property<string>("SurName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_applicant");

                    b.ToTable("applicant", (string)null);
                });

            modelBuilder.Entity("Application.AdmissionCommittee.Data.ApplicantSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicantId")
                        .HasColumnType("bigint")
                        .HasColumnName("applicant_id");

                    b.Property<long>("SpecialityId")
                        .HasColumnType("bigint")
                        .HasColumnName("speciality_id");

                    b.HasKey("Id")
                        .HasName("pk_applicant_speciality");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_applicant_speciality_applicant_id");

                    b.HasIndex("SpecialityId")
                        .HasDatabaseName("ix_applicant_speciality_speciality_id");

                    b.ToTable("applicant_speciality", (string)null);
                });

            modelBuilder.Entity("Application.Groups.Data.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("EducationForm")
                        .HasColumnType("integer")
                        .HasColumnName("education_form");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_year");

                    b.Property<int>("FinanceEnrolmentType")
                        .HasColumnType("integer")
                        .HasColumnName("finance_enrolment_type");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("integer")
                        .HasColumnName("graduation_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long>("SpecialityId")
                        .HasColumnType("bigint")
                        .HasColumnName("speciality_id");

                    b.Property<int>("StudentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("students_count");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("SpecialityId")
                        .HasDatabaseName("ix_group_speciality_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("Application.Groups.Data.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicantId")
                        .HasColumnType("bigint")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<string>("SurName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sur_name");

                    b.HasKey("Id")
                        .HasName("pk_student");

                    b.HasIndex("ApplicantId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_applicant_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_student_group_id");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("Application.Schedules.Data.Cabinet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile");

                    b.Property<string>("Wing")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wing");

                    b.HasKey("Id")
                        .HasName("pk_cabinet");

                    b.ToTable("cabinet", (string)null);
                });

            modelBuilder.Entity("Application.Schedules.Data.ClassSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CabinetId")
                        .HasColumnType("bigint")
                        .HasColumnName("cabinet_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_id");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.Property<int>("WeeksSeparation")
                        .HasColumnType("integer")
                        .HasColumnName("weeks_separation");

                    b.HasKey("Id")
                        .HasName("pk_class_schedule");

                    b.HasIndex("CabinetId")
                        .HasDatabaseName("ix_class_schedule_cabinet_id");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_class_schedule_schedule_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_class_schedule_subject_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_class_schedule_teacher_id");

                    b.ToTable("class_schedule", (string)null);
                });

            modelBuilder.Entity("Application.Schedules.Data.ClassScheduleReplacement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CabinetId")
                        .HasColumnType("bigint")
                        .HasColumnName("cabinet_id");

                    b.Property<long?>("ClassScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_schedule_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsAddition")
                        .HasColumnType("boolean")
                        .HasColumnName("is_addition");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancel");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_id");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_class_schedule_replacement");

                    b.HasIndex("CabinetId")
                        .HasDatabaseName("ix_class_schedule_replacement_cabinet_id");

                    b.HasIndex("ClassScheduleId")
                        .HasDatabaseName("ix_class_schedule_replacement_class_schedule_id");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_class_schedule_replacement_schedule_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_class_schedule_replacement_subject_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_class_schedule_replacement_teacher_id");

                    b.ToTable("class_schedule_replacement", (string)null);
                });

            modelBuilder.Entity("Application.Schedules.Data.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_schedule");

                    b.HasIndex("GroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_schedule_group_id");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("Application.Specialities.Data.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<int?>("EntranceTest")
                        .HasColumnType("integer")
                        .HasColumnName("entrance_test");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_speciality");

                    b.ToTable("speciality", (string)null);
                });

            modelBuilder.Entity("Application.Specialities.Data.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<long>("SpecialityId")
                        .HasColumnType("bigint")
                        .HasColumnName("speciality_id");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SpecialityId")
                        .HasDatabaseName("ix_subject_speciality_id");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("Application.Teachers.Data.ProofreadingTeacherLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<long>("TeacherLoadId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_load_id");

                    b.Property<int>("TotalHours")
                        .HasColumnType("integer")
                        .HasColumnName("total_hours");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_proofreading_teacher_load");

                    b.HasIndex("TeacherLoadId")
                        .HasDatabaseName("ix_proofreading_teacher_load_teacher_load_id");

                    b.HasIndex("Year", "Month")
                        .HasDatabaseName("ix_proofreading_teacher_load_year_month");

                    b.ToTable("proofreading_teacher_load", (string)null);
                });

            modelBuilder.Entity("Application.Teachers.Data.TeacherLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_teacher_load");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_teacher_load_group_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_teacher_load_subject_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_teacher_load_teacher_id");

                    b.ToTable("teacher_load", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.ToTable("role_claim", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.ToTable("user_claim", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.ToTable("user_login", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Application.Access.Data.UserRole", b =>
                {
                    b.HasOne("Application.Access.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Application.Access.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.AdmissionCommittee.Data.Applicant", b =>
                {
                    b.OwnsOne("Application.AdmissionCommittee.Data.ApplicantParent", "Father", b1 =>
                        {
                            b1.Property<long>("ApplicantId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("father_family_name");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("father_first_name");

                            b1.Property<string>("HomePhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("father_home_phone");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("father_mobile_phone");

                            b1.Property<string>("SurName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("father_sur_name");

                            b1.Property<string>("WorkDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("father_work_description");

                            b1.Property<string>("WorkPhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("father_work_phone");

                            b1.HasKey("ApplicantId");

                            b1.ToTable("applicant");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId")
                                .HasConstraintName("fk_applicant_applicant_id");
                        });

                    b.OwnsOne("Application.AdmissionCommittee.Data.ApplicantParent", "Mother", b1 =>
                        {
                            b1.Property<long>("ApplicantId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("mother_family_name");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("mother_first_name");

                            b1.Property<string>("HomePhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("mother_home_phone");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("mother_mobile_phone");

                            b1.Property<string>("SurName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("mother_sur_name");

                            b1.Property<string>("WorkDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("mother_work_description");

                            b1.Property<string>("WorkPhone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("mother_work_phone");

                            b1.HasKey("ApplicantId");

                            b1.ToTable("applicant");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId")
                                .HasConstraintName("fk_applicant_applicant_id");
                        });

                    b.OwnsOne("Application.AdmissionCommittee.Data.ApplicantPassport", "Passport", b1 =>
                        {
                            b1.Property<long>("ApplicantId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<DateTime>("IssueDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("passport_issue_date");

                            b1.Property<string>("Issuer")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("passport_issuer");

                            b1.Property<string>("IssuerCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("passport_issuer_code");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("passport_number");

                            b1.Property<string>("Serial")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("passport_serial");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("passport_type");

                            b1.HasKey("ApplicantId");

                            b1.ToTable("applicant");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId")
                                .HasConstraintName("fk_applicant_applicant_id");
                        });

                    b.OwnsOne("Application.AdmissionCommittee.Data.Statement", "Statement", b1 =>
                        {
                            b1.Property<long>("ApplicantId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("statement_name");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint")
                                .HasColumnName("statement_size");

                            b1.HasKey("ApplicantId");

                            b1.ToTable("applicant");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId")
                                .HasConstraintName("fk_applicant_applicant_id");
                        });

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Passport")
                        .IsRequired();

                    b.Navigation("Statement")
                        .IsRequired();
                });

            modelBuilder.Entity("Application.AdmissionCommittee.Data.ApplicantSpeciality", b =>
                {
                    b.HasOne("Application.AdmissionCommittee.Data.Applicant", "Applicant")
                        .WithMany("ApplicantSpecialities")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applicant_speciality_applicant_applicant_id");

                    b.HasOne("Application.Specialities.Data.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applicant_speciality_speciality_speciality_id");

                    b.Navigation("Applicant");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Application.Groups.Data.Group", b =>
                {
                    b.HasOne("Application.Specialities.Data.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_speciality_speciality_id");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Application.Groups.Data.Student", b =>
                {
                    b.HasOne("Application.AdmissionCommittee.Data.Applicant", "Applicant")
                        .WithOne("Student")
                        .HasForeignKey("Application.Groups.Data.Student", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_applicant_applicant_id");

                    b.HasOne("Application.Groups.Data.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_group_group_id");

                    b.Navigation("Applicant");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Application.Schedules.Data.ClassSchedule", b =>
                {
                    b.HasOne("Application.Schedules.Data.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .HasConstraintName("fk_class_schedule_cabinet_cabinet_id");

                    b.HasOne("Application.Schedules.Data.Schedule", "Schedule")
                        .WithMany("ClassSchedule")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_schedule_schedule_schedule_id");

                    b.HasOne("Application.Specialities.Data.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_schedule_subject_subject_id");

                    b.HasOne("Application.Access.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_class_schedule_user_teacher_id");

                    b.Navigation("Cabinet");

                    b.Navigation("Schedule");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Application.Schedules.Data.ClassScheduleReplacement", b =>
                {
                    b.HasOne("Application.Schedules.Data.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .HasConstraintName("fk_class_schedule_replacement_cabinet_cabinet_id");

                    b.HasOne("Application.Schedules.Data.ClassSchedule", "ClassSchedule")
                        .WithMany()
                        .HasForeignKey("ClassScheduleId")
                        .HasConstraintName("fk_class_schedule_replacement_class_schedule_class_schedule_id");

                    b.HasOne("Application.Schedules.Data.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_schedule_replacement_schedule_schedule_id");

                    b.HasOne("Application.Specialities.Data.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_class_schedule_replacement_subject_subject_id");

                    b.HasOne("Application.Access.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_class_schedule_replacement_user_teacher_id");

                    b.Navigation("Cabinet");

                    b.Navigation("ClassSchedule");

                    b.Navigation("Schedule");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Application.Schedules.Data.Schedule", b =>
                {
                    b.HasOne("Application.Groups.Data.Group", "Group")
                        .WithOne()
                        .HasForeignKey("Application.Schedules.Data.Schedule", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedule_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Application.Specialities.Data.Subject", b =>
                {
                    b.HasOne("Application.Specialities.Data.Speciality", "Speciality")
                        .WithMany("Subjects")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subject_speciality_speciality_id");

                    b.OwnsMany("Application.Specialities.Data.Semester", "Semesters", b1 =>
                        {
                            b1.Property<long>("SubjectId")
                                .HasColumnType("bigint")
                                .HasColumnName("subject_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("hours");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("number");

                            b1.HasKey("SubjectId", "Id")
                                .HasName("pk_subject_semesters");

                            b1.ToTable("subject_semesters", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SubjectId")
                                .HasConstraintName("fk_subject_semesters_subject_subject_id");
                        });

                    b.Navigation("Semesters");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Application.Teachers.Data.ProofreadingTeacherLoad", b =>
                {
                    b.HasOne("Application.Teachers.Data.TeacherLoad", "TeacherLoad")
                        .WithMany("ProofreadingTeacherLoads")
                        .HasForeignKey("TeacherLoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proofreading_teacher_load_teacher_load_teacher_load_id");

                    b.OwnsMany("Application.Teachers.Data.ProofreadingTeacherDay", "Days", b1 =>
                        {
                            b1.Property<long>("ProofreadingTeacherLoadId")
                                .HasColumnType("bigint")
                                .HasColumnName("proofreading_teacher_load_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("hours");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("number");

                            b1.HasKey("ProofreadingTeacherLoadId", "Id")
                                .HasName("pk_proofreading_teacher_day");

                            b1.ToTable("proofreading_teacher_day", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProofreadingTeacherLoadId")
                                .HasConstraintName("fk_proofreading_teacher_day_proofreading_teacher_load_proofrea");
                        });

                    b.Navigation("Days");

                    b.Navigation("TeacherLoad");
                });

            modelBuilder.Entity("Application.Teachers.Data.TeacherLoad", b =>
                {
                    b.HasOne("Application.Groups.Data.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_load_group_group_id");

                    b.HasOne("Application.Specialities.Data.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_load_subject_subject_id");

                    b.HasOne("Application.Access.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_load_user_teacher_id");

                    b.OwnsMany("Application.Specialities.Data.Semester", "Semesters", b1 =>
                        {
                            b1.Property<long>("TeacherLoadId")
                                .HasColumnType("bigint")
                                .HasColumnName("teacher_load_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("hours");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("number");

                            b1.HasKey("TeacherLoadId", "Id")
                                .HasName("pk_teacher_load_semesters");

                            b1.ToTable("teacher_load_semesters", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TeacherLoadId")
                                .HasConstraintName("fk_teacher_load_semesters_teacher_load_teacher_load_id");
                        });

                    b.Navigation("Group");

                    b.Navigation("Semesters");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Application.Access.Data.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Application.AdmissionCommittee.Data.Applicant", b =>
                {
                    b.Navigation("ApplicantSpecialities");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Application.Groups.Data.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Application.Schedules.Data.Schedule", b =>
                {
                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("Application.Specialities.Data.Speciality", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Application.Teachers.Data.TeacherLoad", b =>
                {
                    b.Navigation("ProofreadingTeacherLoads");
                });
#pragma warning restore 612, 618
        }
    }
}
