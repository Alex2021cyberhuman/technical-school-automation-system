@using Microsoft.EntityFrameworkCore
@using Application.Groups.Data
@using Application.AdmissionCommittee.Data
@using Application.AdmissionCommittee.Forms
@using Application.Common.Enums
@using Application.Data
@using Application.Groups.Forms
@using DocumentFormat.OpenXml.Office2010.Excel
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using System.Collections.Concurrent
@using Color = MudBlazor.Color
@inject ILogger<EnrollApplicantModal> Logger
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject IStringLocalizer StringLocalizer
<button type="button" class="btn btn-primary" @onclick="OnOpenAsync">
    Добавить студентов в группу
</button>

@if (ModalVisible)
{
    <PageTitle>Техникум - Список студентов в группе </PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog my-large-modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Список студентов в группе</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        @if (EnrolmentAvailable)
                        {
                            <div class="row">
                                <EditForm EditContext="FilterContext">
                                    <DataAnnotationsValidator/>
                                    <MudGrid>
                                        <MudItem sm="6">
                                            <MudTextField
                                                Label="Поиск студентов"
                                                @bind-Value="Filter.SearchString"
                                                OnKeyUp="() => FilterContext.NotifyFieldChanged(FieldIdentifier.Create(() => Filter.SearchString))"/>
                                        </MudItem>
                                        <MudItem sm="6">
                                            <MudSwitch
                                                T="bool"
                                                Label="Включить выбранных"
                                                Checked="Filter.IncludeSelected"
                                                CheckedChanged="(value) => { Filter.IncludeSelected = value; FilterContext.NotifyFieldChanged(FieldIdentifier.Create(() => Filter.IncludeSelected)); }"/>
                                            <MudSwitch
                                                T="bool"
                                                Label="Включить не выбранных"
                                                Checked="Filter.IncludeNotSelected"
                                                CheckedChanged="(value) => { Filter.IncludeNotSelected = value; FilterContext.NotifyFieldChanged(FieldIdentifier.Create(() => Filter.IncludeNotSelected)); }"/>
                                        </MudItem>
                                        <MudItem sm="12">
                                            <MudButton OnClick="ResetAsync">Все</MudButton>
                                        </MudItem>
                                    </MudGrid>
                                </EditForm>
                            </div>
                            <div class="row">
                                <MudTable T="Applicant" ServerData="LoadApplicantsFromDatabase" @ref="ApplicantsTable">
                                    <HeaderContent>
                                        <MudTh>Зачислить</MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="Id">№</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="FullName">ФИО</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>Образование</MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="MathRating">Баллы по математике</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="LanguageRating">Баллы по русскому языку</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="AverageAttestRating">Средний балл</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            <MudTableSortLabel T="Applicant" SortLabel="CommonScore">Общая оценка</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>Примечание</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>
                                            <MudSwitch
                                                Color="Color.Primary"
                                                T="bool"
                                                Checked="@ApplicantSelection.GetValueOrDefault(context.Id)"
                                                CheckedChanged="(value) => SetApplicantEnrollCheck(context, value)"/>
                                        </MudTd>
                                        <MudTd>@context.Id</MudTd>
                                        <MudTd>@context.FullName</MudTd>
                                        <MudTd>
                                            <div class="hint-information" data-name="Базовое образование: @context.EducationDescription, Год: @context.EducationDocumentIssued.Year.">
                                                @(StringLocalizer[context.EducationType.ToString()])
                                            </div>
                                        </MudTd>
                                        <MudTd>@context.LanguageRating</MudTd>
                                        <MudTd>@context.MathRating</MudTd>
                                        <MudTd>@context.AverageAttestRating</MudTd>
                                        <MudTd>@context.CommonScore</MudTd>
                                        <MudTd>@context.Description</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new[] { 100 }"/>
                                    </PagerContent>
                                </MudTable>
                            </div>
                        }

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnConfirmAsync">Подтвердить и закрыть</button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    public EnrollApplicantFilterForm Filter { get; set; } = new();

    public EditContext FilterContext { get; set; } = null!;

    public bool ModalVisible { get; set; }

    [Parameter]
    public Group Group { get; set; } = new();

    [Parameter]
    public EventCallback StudentsAdded { get; set; } = EventCallback.Empty;

    public bool EnrolmentAvailable => DateTime.Today.Year <= Group.GraduationYear;

    public ConcurrentDictionary<long, bool> ApplicantSelection { get; set; } = new();

    public MudTable<Applicant>? ApplicantsTable { get; set; }

    private async Task OnOpenAsync()
    {
        if (ModalVisible) return;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        ApplicantSelection = new();
        Filter = new EnrollApplicantFilterForm();
        FilterContext = new EditContext(Filter);
        FilterContext.OnFieldChanged += FilterContextOnOnFieldChanged;
        await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
        ModalVisible = true;
    }

    private async void FilterContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        try
        {
            await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "Error in async void method");
        }
    }

    private void OnCancel()
    {
        if (!ModalVisible) return;
        ModalVisible = false;
    }

    private async Task<TableData<Applicant>> LoadApplicantsFromDatabase(TableState tableState)
    {
        var page = tableState.Page;
        var pageSize = tableState.PageSize;
        var sortDirection = tableState.SortDirection;
        var sortLabel = tableState.SortLabel;
        var nowYear = DateTime.Today.Year;
        var budgetTypes = Group.FinanceEnrolmentType switch {
            FinanceEnrolmentType.Budget => new[] { FinanceEducationType.Budget },
            FinanceEnrolmentType.OutOfBudget => new[] { FinanceEducationType.IndividualEntities, FinanceEducationType.LegalEntities },
            _ => throw new ArgumentOutOfRangeException()
            };


        await using var context = await DbContextFactory.CreateDbContextAsync();
        var queryable = context.Applicant
            .AsNoTracking()
            .Where(x => x.Student == null)
            .Where(x => x.ApplicantSpecialities.Any(speciality => speciality.SpecialityId == Group.SpecialityId))
            .Where(x => x.DirectorDecision == DirectorDecisionType.NotСonsidered)
            .Where(x => x.EducationForm == Group.EducationForm)
            .Where(x => budgetTypes.Contains(x.FinanceEducationType))
            .Where(x => x.Submitted.Year == nowYear)
            .FilterApplicantsSearchString(Filter.SearchString);

        var selectedIds = ApplicantSelection.Where(x => x.Value).Select(x => x.Key);
        queryable = Filter.IncludeSelected switch
        {
            false when Filter.IncludeNotSelected => queryable.Where(x => !selectedIds.Contains(x.Id)),
            true when !Filter.IncludeNotSelected => queryable.Where(x => selectedIds.Contains(x.Id)),
            _ => queryable
            };

        var sortedQueryable = queryable.SortApplicantsTable(sortLabel, sortDirection);

        var pagedQueryable = sortedQueryable.Skip(page * pageSize).Take(pageSize);

        var items = await pagedQueryable.ToListAsync();
        var totalItems = items.Count;
        if (items.Count == pageSize) totalItems = await queryable.CountAsync();
        var tableData = new TableData<Applicant>()
        {
            Items = items,
            TotalItems = totalItems
        };
        return tableData;
    }

    private async Task OnConfirmAsync()
    {
        if (!ModalVisible) return;

        var enrolledApplicantIds = ApplicantSelection.Where(x => x.Value)
            .Select(x => x.Key)
            .ToList();

        if (!enrolledApplicantIds.Any()) return;

        await using var context = await DbContextFactory.CreateDbContextAsync();
        var enrolledApplicants = await context.Applicant.Where(x => enrolledApplicantIds.Contains(x.Id))
            .ToListAsync();
        enrolledApplicants.ForEach(x =>
        {
            x.DirectorDecision = DirectorDecisionType.Enroll;
            x.Student = new Student
            {
                FirstName = x.FirstName,
                FamilyName = x.FamilyName,
                SurName = x.SurName,
                DateOfBirth = x.DateOfBirth,
                ApplicantId = x.Id,
                GroupId = Group.Id
            };
        });
        await context.SaveChangesAsync();
        await StudentsAdded.InvokeAsync();
        OnCancel();
    }

    private void SetApplicantEnrollCheck(Applicant context, bool value)
    {
        ApplicantSelection[context.Id] = value;
    }

    private async Task ResetAsync()
    {
        Filter.Reset();
        StateHasChanged();
        await (ApplicantsTable?.ReloadServerData() ?? Task.CompletedTask);
    }

}