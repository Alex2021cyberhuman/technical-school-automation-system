@using Microsoft.EntityFrameworkCore
@using Application.Groups.Data
@using System.Security.Claims
@using Application.Access.Enums
@using Application.Common.Enums
@using Application.Data
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject IDialogService DialogService
<button type="button" class="btn btn-primary" @onclick="OnOpenAsync">
    Студенты
</button>

@if (ModalVisible)
{
    <PageTitle>Список студентов в группе</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Список студентов в группе</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudTextField Label="Поиск студентов" @bind-Value="SearchString"/>
                    <EnrollApplicantModal Group="Group" StudentsAdded="OnStudentsAddedAsync"/>
                    <MudTable Items="Students" T="Student" Filter="Filter" SortLabel="Сортировать по">
                        <HeaderContent>
                            <MudTh>№</MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Student" SortBy="@(x => x.FullName)">ФИО</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Student" SortBy="@(x => x.DateOfBirth)">Дата рождения</MudTableSortLabel>
                            </MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Id</MudTd>
                            <MudTd>@context.FullName</MudTd>
                            <MudTd>@context.DateOfBirth.ToShortDateString()</MudTd>
                            <MudTd>
                                <MudButtonGroup>
                                    <MudIconButton Icon="@Icons.Filled.Delete" Title="Исключить" OnClick="@(async () => await ExcludeAsync(@context))"/>
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public bool ModalVisible { get; set; }

    public List<Student> Students { get; set; } = new();

    [Parameter]
    public Group Group { get; set; } = new();

    [Parameter]
    public EventCallback StudentListChanged { get; set; } = EventCallback.Empty;

    public string? SearchString { get; set; }

    private async Task OnOpenAsync()
    {
        if (ModalVisible) return;

        ModalVisible = true;
        await LoadStudentsAsync();
    }

    private async Task LoadStudentsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Students = await context.Student.Where(x => x.GroupId == Group.Id)
            .AsNoTracking()
            .ToListAsync();
    }

    private void OnCancel()
    {
        if (!ModalVisible) return;
        ModalVisible = false;
        Students.Clear();
    }


    private async Task OnStudentsAddedAsync()
    {
        await LoadStudentsAsync();
        await StudentListChanged.InvokeAsync();
    }

    private bool Filter(Student student)
    {
        return string.IsNullOrWhiteSpace(SearchString) || student.FullName.Contains(SearchString, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task ExcludeAsync(Student student)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var dbStudent = await context.Student.Include(x => x.Applicant).FirstOrDefaultAsync(x => x.Id == student.Id);

        if (dbStudent is null)
        {
            await LoadStudentsAsync();
            return;
        }
        var removeStudent = await DialogService.ShowMessageBox("Исключение", $"Вы действительно хотите исключить студента {student.FullName} из группы {Group.Name}? Вы сможете зачислить его повторно.", "Да", "Нет");
        if (!removeStudent.HasValue || !removeStudent.Value)
        {
            return;
        }
        var applicant = dbStudent.Applicant;
        applicant.DirectorDecision = DirectorDecisionType.NotEnroll;
        applicant.Student = null;
        context.Student.Remove(dbStudent);
        await context.SaveChangesAsync();
        await LoadStudentsAsync();
        await StudentListChanged.InvokeAsync();
    }
}