@page "/groups"
@attribute [Authorize(Policy = PolicyIdentifiers.HeadOfAdmissionCommittee)]
@using Application.Groups.Data
@using Microsoft.EntityFrameworkCore
@using Application.Access.Enums
@using System.Security.Claims
@using Application.Data
@inject IDbContextFactory<MainDbContext> DbContextFactory
<h3>Группы</h3>
<PageTitle>Группы</PageTitle>
Просмотр списка груп
<CreateGroupModal OnAfterCreate="OnAfterGroupCreated"/>
<div class="row">
    <div class="col-12 col-md-4">
    </div>
    <div class="col-12 col-md-8">
        <MudTable Items="Groups" Hover="true" SortLabel="Сортировать по" Filter="Filter">
            <HeaderContent>
                <MudTh>№ п.п.</MudTh>
                <MudTh>Название</MudTh>
                <MudTh>Количество студентов</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.StudentsCount</MudTd>
                <MudTd>
                    <div class="btn-group">
                        <GroupStudentsModal Group="context" StudentListChanged="() => OnStudentsAddedAsync(context.Id)"/>
                        <GroupDownloadEnrolledStudentsButton Group="context"/>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </div>
</div>

@code {

    private List<Group> Groups { get; set; } = new();

    private ClaimsPrincipal CurrentUser { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadGroupsAsync();
        CurrentUser = (await AuthenticationStateTask).User;
    }

    private async Task OnAfterGroupCreated(CreateGroupModal.AfterCreateEventArgs args)
    {
        await LoadGroupsAsync();
    }

    private async Task LoadGroupsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Groups = await context.Group.OrderBy(x => x.Name)
            .ToListAsync();
    }

    private async Task OnStudentsAddedAsync(long groupId)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var group = await context.Group.FindAsync(groupId) ?? throw new InvalidOperationException();
        group.StudentsCount = await context.Student.CountAsync(x => x.GroupId == groupId);
        await context.SaveChangesAsync();
        Groups[Groups.FindIndex(x => x.Id == groupId)] = group;
    }

    private bool Filter(Group group)
    {
        return true;
    }

}