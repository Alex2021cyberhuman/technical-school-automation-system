@using Application.Specialities.Data
@using Application.Access.Data
@using Application.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@using Application.Schedules.Data
@using Microsoft.Extensions.Localization
@inherits MudBaseInput<Cabinet?>
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject ILogger<MyTeacherPicker> Logger
@inject IStringLocalizer StringLocalizer
<MudField Label="Учитель" Variant="Variant.Text">
    <MudText>@Value?.Name (@Value?.Code)</MudText>
    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleCabinetList" Icon="@(CabinetsListVisible ? Icons.Filled.Close : Icons.Filled.MenuOpen)" Title="Список кабинетов" Size="Size.Small"/>
    <MudIconButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeselectAsync" Icon="@Icons.Filled.Cancel" Title="Отменить" Size="Size.Small"/>
</MudField>
@if (CabinetsListVisible)
{
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document" style="max-width: 847px!important;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выбор кабинета</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="ToggleCabinetList">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudTable T="Cabinet" Items="@Cabinets" Hover="true" SortLabel="Сортировать по" Filter="Filter" SelectedItemChanged="OnSelectedItemChangedAsync">
                        <ToolBarContent>
                            <MudTextField @bind-Value="SearchString" Placeholder="Поиск Учителя" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Code.ToNaturalSortString()">Код</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Profile">Профиль</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Name">Название</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Floor">Этаж</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Wing">Отделение</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Код">@context.Code</MudTd>
                            <MudTd DataLabel="Профиль">@context.Profile</MudTd>
                            <MudTd DataLabel="Название">@context.Name</MudTd>
                            <MudTd DataLabel="Этаж">@context.Floor</MudTd>
                            <MudTd DataLabel="Отделение">@context.Wing</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleCabinetList">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{

    [Parameter]
    public Expression<Func<Cabinet>>? ValueExpression { get; set; }

    [Parameter]
    public IReadOnlyCollection<Cabinet> Cabinets { get; set; } = new List<Cabinet>();

    [CascadingParameter]
    EditContext? CascadedEditContext { get; set; }

    [Parameter]
    public TeacherAvailabilityFilter TeacherAvailabilityFilterFilter { get; set; } = new();

    public FieldIdentifier FieldIdentifier { get; set; }

    public string SearchString { get; set; } = string.Empty;

    public bool CabinetsListVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (CascadedEditContext is not null)
        {
            FieldIdentifier = FieldIdentifier.Create(ValueExpression!);
        }
    }

    private void ToggleCabinetList()
    {
        CabinetsListVisible = !CabinetsListVisible;
    }

    private bool Filter(Cabinet cabinet)
    {
        return
            string.IsNullOrWhiteSpace(SearchString) ||
            string.Join(
                " ",
                cabinet.Code,
                cabinet.Name,
                cabinet.Floor.ToString(),
                cabinet.Profile,
                cabinet.Wing).Contains(SearchString, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task OnSelectedItemChangedAsync(Cabinet cabinet)
    {
        Value = cabinet;
        await ValueChanged.InvokeAsync(Value);
        CascadedEditContext?.NotifyFieldChanged(FieldIdentifier);
        ToggleCabinetList();
    }

    private async Task DeselectAsync()
    {
        Value = null;
        await ValueChanged.InvokeAsync(Value);
    }
}