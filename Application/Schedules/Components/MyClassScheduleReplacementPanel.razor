@using Application.Schedules.Data
@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore.Internal
@using Application.Groups.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
<MudGrid>
    <MudItem xs="12">
        <MudDatePicker Label="Дата" DisplayMonths="2" Date="SelectedDate" DateChanged="ChangeDateAsync"/>
    </MudItem>
    <MudItem xs="12">
        <MudSimpleTable Bordered="true">
            <thead>
            <tr>
                <th></th>
                <th>@StringLocalizer[SelectedDate.DayOfWeek.ToString()]</th>
            </tr>
            </thead>
            <tbody>
            @for (var i = 1; i <= MaxNumber; i++)
            {
                var classNumber = i;
                var classSchedulesOfDayNumber = ClassScheduleCache.GetValueOrDefault((classNumber, dayOfWeek:SelectedDate.DayOfWeek));
                var classScheduleReplacement = ClassScheduleReplacementCache.GetValueOrDefault(classNumber);
                var item = classSchedulesOfDayNumber?.FirstOrDefault();
                <tr>
                    <td>@classNumber</td>
                    <td>

                        @if (classSchedulesOfDayNumber is null || !classSchedulesOfDayNumber.Any())
                        {
                        }
                        else if (item is not null && item.WeeksSeparation == WeeksSeparationType.All)
                        {
                            if (classScheduleReplacement is null)
                            {
                                <MyReplaceClassSchedule
                                    ClassSchedule="item"
                                    SelectedDate="SelectedDate"
                                    Subjects="Subjects"
                                    OnReplaceClassSchedule="OnReplaceClassSchedule"/>
                            }
                            else
                            {
                                <MyEditClassScheduleReplacement
                                    ClassScheduleReplacement="classScheduleReplacement"
                                    Subjects="Subjects"
                                    OnEditClassScheduleReplacement="OnEditClassScheduleReplacement"
                                    OnClassScheduleReplacementRemoved="OnClassScheduleReplacementRemoved"/>
                            }
                        }
                        else
                        {
                            var oddItem = classSchedulesOfDayNumber.FirstOrDefault(x => x.WeeksSeparation == WeeksSeparationType.Odd);
                            var evenItem = classSchedulesOfDayNumber.FirstOrDefault(x => x.WeeksSeparation == WeeksSeparationType.Even);
                            @if (classScheduleReplacement is null)
                            {
                                @if (oddItem is not null)
                                {
                                    <MyReplaceClassSchedule
                                        ClassSchedule="oddItem"
                                        SelectedDate="SelectedDate"
                                        Subjects="Subjects"
                                        OnReplaceClassSchedule="OnReplaceClassSchedule"/>
                                }
                                else
                                {
                                }
                                @if (evenItem is not null)
                                {
                                    <MyReplaceClassSchedule
                                        ClassSchedule="evenItem"
                                        SelectedDate="SelectedDate"
                                        Subjects="Subjects"
                                        OnReplaceClassSchedule="OnReplaceClassSchedule"/>
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                                <MyEditClassScheduleReplacement
                                    ClassScheduleReplacement="classScheduleReplacement"
                                    Subjects="Subjects"
                                    OnEditClassScheduleReplacement="OnEditClassScheduleReplacement"
                                    OnClassScheduleReplacementRemoved="OnClassScheduleReplacementRemoved"/>
                            }
                        }
                    </td >
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public Schedule Schedule { get; set; } = null!;

    [Parameter]
    public List<Subject> Subjects { get; set; } = new();

    [Parameter]
    public int MaxNumber { get; set; }

    [Parameter]
    public DayOfWeek[] DayOfWeeks { get; set; } = null!;

    public DateTime SelectedDate { get; set; } = DateTime.Now;

    private List<ClassSchedule> ClassSchedules { get; set; } = new();

    private Dictionary<(int number, DayOfWeek dayOfWeek), List<ClassSchedule>> ClassScheduleCache { get; set; } = new();

    private List<ClassScheduleReplacement> ClassScheduleReplacements { get; set; } = new();

    private Dictionary<int, ClassScheduleReplacement> ClassScheduleReplacementCache { get; set; } = new();

    private void OnClassScheduleCreated(ClassSchedule classSchedule)
    {
        ClassSchedules.Add(classSchedule);
        var scheduleCell = (classSchedule.Number, classSchedule.DayOfWeek);
        if (ClassScheduleCache.ContainsKey(scheduleCell))
        {
            ClassScheduleCache[scheduleCell].Add(classSchedule);
        }
        else
        {
            ClassScheduleCache[scheduleCell] = new()
            {
                classSchedule
            };
        }
    }

    private void OnReplaceClassSchedule(ClassScheduleReplacement classScheduleReplacement)
    {
        ClassScheduleReplacements.Add(classScheduleReplacement);
        var scheduleCell = classScheduleReplacement.Number;
        if (!ClassScheduleReplacementCache.ContainsKey(scheduleCell))
        {
            ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
        }
        else
        {
            throw new InvalidOperationException();
        }
    }

    private void OnEditClassScheduleReplacement(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements[index] = classScheduleReplacement;
        var scheduleCell = classScheduleReplacement.Number;
        if (ClassScheduleReplacementCache.ContainsKey(scheduleCell))
        {
            ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
        }
        else
        {
            throw new InvalidOperationException();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var oldSchedule = Schedule;
        await base.OnParametersSetAsync();
        if (!ReferenceEquals(oldSchedule, Schedule))
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            ClassSchedules = await context.ClassSchedule
                .Where(x => x.ScheduleId == Schedule.Id)
                .OrderBy(x => x.Number)
                .ThenBy(x => x.DayOfWeek).ToListAsync();
            ClassScheduleCache = ClassSchedules
                .GroupBy(x => (x.Number, x.DayOfWeek))
                .ToDictionary(x => x.Key, x => x.ToList());
        }
    }

    private async Task ChangeDateAsync(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
        {
            return;
        }
        var date = DateOnly.FromDateTime(dateTime.Value);
        await using var context = await DbContextFactory.CreateDbContextAsync();
        ClassScheduleReplacements = await context.ClassScheduleReplacement
            .Where(x => x.ScheduleId == Schedule.Id)
            .Where(x => x.Date == date)
            .ToListAsync();
        ClassScheduleReplacementCache = ClassScheduleReplacements
            .ToDictionary(x => x.Number, x => x);
        SelectedDate = date.ToDateTime(TimeOnly.MinValue);
    }

    private void OnClassScheduleReplacementRemoved(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements.RemoveAt(index);
        var scheduleCell = classScheduleReplacement.Number;
        if (ClassScheduleReplacementCache.ContainsKey(scheduleCell))
        {
            ClassScheduleReplacementCache.Remove(scheduleCell);
        }
        else
        {
            throw new InvalidOperationException();
        }
    }

}