@using Application.Schedules.Data
@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@using Application.Access.Data
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject WeekSeparationService WeekSeparationService
<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudDatePicker Label="Дата" DisplayMonths="2" Date="SelectedDate" DateChanged="ChangeDateAsync"/>
        </MudItem>
        <MudItem xs="12">
            <MudSimpleTable Bordered="true">
                <thead>
                <tr>
                    <th></th>
                    <th>@StringLocalizer[SelectedDate.DayOfWeek.ToString()]</th>
                </tr>
                </thead>
                <tbody>
                @for (var i = 1; i <= MaxNumber; i++)
                {
                    var classNumber = i;
                    var classSchedule =
                        ClassScheduleCache.GetValueOrDefault((classNumber, dayOfWeek:SelectedDate.DayOfWeek, WeeksSeparationType.All)) ??
                        ClassScheduleCache.GetValueOrDefault((classNumber, dayOfWeek:SelectedDate.DayOfWeek, CurrentWeekSeparation));
                    var classScheduleReplacement = ClassScheduleReplacementCache.GetValueOrDefault(classNumber);
                    <tr>
                        <td>@classNumber</td>
                        <td>
                            @if (classScheduleReplacement is null)
                            {
                                if (classSchedule is null)
                                {
                                    <MyReplaceClassSchedule
                                        ClassSchedule="classSchedule"
                                        Cabinets="Cabinets"
                                        Subjects="Subjects"
                                        Teachers="Teachers"
                                        SelectedDate="SelectedDate"
                                        OnReplaceClassSchedule="OnReplaceClassSchedule"/>
                                }
                                else
                                {
                                    <MyCreateAdditionClassSchedule
                                        Schedule="Schedule"
                                        Cabinets="Cabinets"
                                        Subjects="Subjects"
                                        Teachers="Teachers"
                                        SelectedDate="SelectedDate"
                                        Number="classNumber"
                                        OnClassScheduleReplacementCreated="OnClassScheduleReplacementCreated"/>
                                }
                            }
                            else
                            {
                                <MyEditClassScheduleReplacement
                                    Cabinets="Cabinets"
                                    Subjects="Subjects"
                                    Teachers="Teachers"
                                    ClassScheduleReplacement="classScheduleReplacement"
                                    OnEditClassScheduleReplacement="OnEditClassScheduleReplacement"
                                    OnClassScheduleReplacementRemoved="OnClassScheduleReplacementRemoved"/>
                            }
                        </td >
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public List<User> Teachers { get; set; } = new();

    [Parameter]
    public List<Cabinet> Cabinets { get; set; } = new();

    [Parameter]
    public Schedule Schedule { get; set; } = null!;

    [Parameter]
    public List<Subject> Subjects { get; set; } = new();

    [Parameter]
    public int MaxNumber { get; set; }

    [Parameter]
    public DayOfWeek[] DayOfWeeks { get; set; } = null!;

    public WeeksSeparationType CurrentWeekSeparation { get; set; }

    public DateTime SelectedDate { get; set; } = DateTime.Now;

    private List<ClassSchedule> ClassSchedules { get; set; } = new();

    private Dictionary<(int number, DayOfWeek dayOfWeek, WeeksSeparationType weeksSeparation), ClassSchedule> ClassScheduleCache { get; set; } = new();

    private List<ClassScheduleReplacement> ClassScheduleReplacements { get; set; } = new();

    private Dictionary<int, ClassScheduleReplacement> ClassScheduleReplacementCache { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ChangeDateAsync(DateTime.Now);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (ClassSchedules.Count == 0 || ClassSchedules.First().ScheduleId != Schedule.Id)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            ClassSchedules = await context.ClassSchedule
                .Where(x => x.ScheduleId == Schedule.Id)
                .Where(x => x.DayOfWeek == SelectedDate.DayOfWeek)
                .OrderBy(x => x.Number)
                .ThenBy(x => x.DayOfWeek).ToListAsync();
            ClassScheduleCache = ClassSchedules
                .ToDictionary(x => (x.Number, x.DayOfWeek, x.WeeksSeparation));
        }
    }

    private async Task ChangeDateAsync(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
        {
            return;
        }
        var date = DateOnly.FromDateTime(dateTime.Value);
        await using var context = await DbContextFactory.CreateDbContextAsync();
        ClassScheduleReplacements = await context.ClassScheduleReplacement
            .Where(x => x.ScheduleId == Schedule.Id)
            .Where(x => x.Date == date)
            .Include(x => x.Cabinet)
            .Include(x => x.Teacher)
            .Include(x => x.Schedule)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Cabinet)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Teacher)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Schedule)
            .ToListAsync();
        ClassScheduleReplacementCache = ClassScheduleReplacements
            .ToDictionary(x => x.Number, x => x);

        SelectedDate = date.ToDateTime(TimeOnly.MinValue);
        CurrentWeekSeparation = WeekSeparationService.GetCurrentWeekSeparation(SelectedDate);
    }

    private void OnClassScheduleReplacementRemoved(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements.RemoveAt(index);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache.Remove(scheduleCell);
    }

    private void OnReplaceClassSchedule(ClassScheduleReplacement classScheduleReplacement)
    {
        ClassScheduleReplacements.Add(classScheduleReplacement);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }

    private void OnEditClassScheduleReplacement(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements[index] = classScheduleReplacement;
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }

    private void OnClassScheduleReplacementCreated(ClassScheduleReplacement classScheduleReplacement)
    {
        ClassScheduleReplacements.Add(classScheduleReplacement);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }

}