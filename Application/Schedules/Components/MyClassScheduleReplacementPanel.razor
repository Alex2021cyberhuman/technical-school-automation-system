@using Application.Schedules.Data
@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@using Application.Access.Data
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject WeekSeparationService WeekSeparationService

<MudContainer>
    @if (!Loading)
    {
        <MudText> Число элементов @ClassSchedules.Count</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker Label="Дата" DisplayMonths="2" Date="SelectedDate" DateChanged="ChangeDateAsync" Disabled="Loading"/>
                <MudText>@StringLocalizer[WeekSeparationService.GetCurrentWeekSeparation(SelectedDate).ToString()]</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudSimpleTable Bordered="true">
                    <thead>
                    <tr>
                        <th></th>
                        <th>@StringLocalizer[SelectedDate.DayOfWeek.ToString()]</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (var i = 1; i <= MaxNumber; i++)
                    {
                        var classNumber = i;
                        var classSchedule =
                            ClassScheduleCache.GetValueOrDefault((classNumber, SelectedDate.DayOfWeek, WeeksSeparationType.All)) ??
                            ClassScheduleCache.GetValueOrDefault((classNumber, SelectedDate.DayOfWeek, CurrentWeekSeparation));
                        var classScheduleReplacement = ClassScheduleReplacementCache.GetValueOrDefault(classNumber);
                        <tr>
                            <td>@classNumber</td>
                            <td>
                                <div class="replacements-cell">
                                    @if (classScheduleReplacement is null)
                                    {
                                        if (classSchedule is not null)
                                        {
                                            <MyReplaceClassSchedule
                                                ClassSchedule="classSchedule"
                                                Cabinets="Cabinets"
                                                Subjects="Subjects"
                                                Teachers="Teachers"
                                                SelectedDate="SelectedDate"
                                                OnReplaceClassSchedule="OnReplaceClassSchedule"/>
                                        }
                                        else
                                        {
                                            <MyCreateAdditionClassSchedule
                                                Schedule="Schedule"
                                                Cabinets="Cabinets"
                                                Subjects="Subjects"
                                                Teachers="Teachers"
                                                SelectedDate="SelectedDate"
                                                Number="classNumber"
                                                OnClassScheduleReplacementCreated="OnClassScheduleReplacementCreated"/>
                                        }
                                    }
                                    else
                                    {
                                        <MyEditClassScheduleReplacement
                                            Cabinets="Cabinets"
                                            Subjects="Subjects"
                                            Teachers="Teachers"
                                            ClassScheduleReplacement="classScheduleReplacement"
                                            OnEditClassScheduleReplacement="OnEditClassScheduleReplacement"
                                            OnClassScheduleReplacementRemoved="OnClassScheduleReplacementRemoved"/>
                                    }
                                </div>
                            </td >
                        </tr>
                    }
                    </tbody>
                </MudSimpleTable>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudProgressCircular Color="@Color.Primary" Indeterminate="true"/>
    }
</MudContainer>

@code {

    [Parameter]
    public List<User> Teachers { get; set; } = new();

    [Parameter]
    public List<Cabinet> Cabinets { get; set; } = new();

    [Parameter]
    public Schedule Schedule { get; set; } = null!;

    public long ScheduleId { get; set; }

    [Parameter]
    public List<Subject> Subjects { get; set; } = new();

    [Parameter]
    public int MaxNumber { get; set; }

    [Parameter]
    public DayOfWeek[] DayOfWeeks { get; set; } = null!;

    public WeeksSeparationType CurrentWeekSeparation { get; set; }

    public DateTime SelectedDate { get; set; } = DateTime.Now;

    private List<ClassSchedule> ClassSchedules { get; set; } = new();

    private Dictionary<(int number, DayOfWeek dayOfWeek, WeeksSeparationType weeksSeparation), ClassSchedule> ClassScheduleCache { get; set; } = new();

    private List<ClassScheduleReplacement> ClassScheduleReplacements { get; set; } = new();

    private Dictionary<int, ClassScheduleReplacement> ClassScheduleReplacementCache { get; set; } = new();

    public bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ChangeDateAsync(DateTime.Now);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Schedule.Id != ScheduleId)
        {
            ScheduleId = Schedule.Id;
            Loading = true;
            await using var context = await DbContextFactory.CreateDbContextAsync();
            ClassSchedules = await context.ClassSchedule
                .Include(x => x.Cabinet)
                .Include(x => x.Teacher)
                .Include(x => x.Schedule)
                .Include(x => x.Subject)
                .Where(x => x.ScheduleId == Schedule.Id)
                .Where(x => x.DayOfWeek == SelectedDate.DayOfWeek)
                .OrderBy(x => x.Number)
                .ThenBy(x => x.DayOfWeek).ToListAsync();
            ClassScheduleCache = ClassSchedules
                .ToDictionary(x => (x.Number, x.DayOfWeek, x.WeeksSeparation));

            await ReloadClassScheduleReplacementsAsync(context, DateOnly.FromDateTime(SelectedDate));

            Loading = false;
        }
    }

    private async Task ChangeDateAsync(DateTime? dateTime)
    {
        if (Loading || !dateTime.HasValue)
        {
            return;
        }
        Loading = true;
        if (dateTime.Value.Date < DateTime.Now.Date)
        {
            dateTime = DateTime.Now.Date;
        }
        while (!DayOfWeeks.Contains(dateTime.Value.DayOfWeek))
        {
            dateTime = dateTime.Value.AddDays(1);
        }

        var date = DateOnly.FromDateTime(dateTime.Value);
        await using var context = await DbContextFactory.CreateDbContextAsync();
        await ReloadClassScheduleReplacementsAsync(context, date);

        CurrentWeekSeparation = WeekSeparationService.GetCurrentWeekSeparation(SelectedDate);
        Loading = false;
        SelectedDate = date.ToDateTime(TimeOnly.MinValue);
    }

    private async Task ReloadClassScheduleReplacementsAsync(MainDbContext context, DateOnly date)
    {
        ClassScheduleReplacements = await context.ClassScheduleReplacement
            .Where(x => x.ScheduleId == Schedule.Id)
            .Where(x => x.Date == date)
            .Include(x => x.Cabinet)
            .Include(x => x.Teacher)
            .Include(x => x.Schedule)
            .Include(x => x.Subject)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Cabinet)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Teacher)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Schedule)
            .Include(x => x.ClassSchedule)
            .ThenInclude(x => x!.Subject)
            .ToListAsync();
        ClassScheduleReplacementCache = ClassScheduleReplacements
            .ToDictionary(x => x.Number, x => x);
    }

    private void OnClassScheduleReplacementRemoved(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements.RemoveAt(index);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache.Remove(scheduleCell);
    }

    private void OnReplaceClassSchedule(ClassScheduleReplacement classScheduleReplacement)
    {
        ClassScheduleReplacements.Add(classScheduleReplacement);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }

    private void OnEditClassScheduleReplacement(ClassScheduleReplacement classScheduleReplacement)
    {
        var index = ClassScheduleReplacements.FindIndex(x => x.Id == classScheduleReplacement.Id);
        ClassScheduleReplacements[index] = classScheduleReplacement;
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }

    private void OnClassScheduleReplacementCreated(ClassScheduleReplacement classScheduleReplacement)
    {
        ClassScheduleReplacements.Add(classScheduleReplacement);
        var scheduleCell = classScheduleReplacement.Number;
        ClassScheduleReplacementCache[scheduleCell] = classScheduleReplacement;
    }


}