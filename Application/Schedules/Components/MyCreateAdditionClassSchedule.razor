@using Application.Schedules.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@using Application.Specialities.Data
@using Application.Access.Data
@using Application.Common.Data
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject WeekSeparationService WeekSeparationService
<MudIconButton
    Class="replacements-cell-solid-item"
    Variant="Variant.Outlined"
    Color="Color.Secondary"
    OnClick="OnOpen"
    Title="Добавить однодневный элемент расписания"
    Icon="@Icons.Filled.Add"/>

@if (Visible)
{
    <PageTitle>Техникум - Добавить однодневный элемент расписания </PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить однодневный элемент расписания</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MudField Label="Дата">@SelectedDate.ToShortDateString()</MudField>
                        <MudField Label="День недели">@StringLocalizer[SelectedDate.DayOfWeek.ToString()]</MudField>
                        <MudField Label="Номер урока">@Number</MudField>
                        <MySubjectSelector Subjects="Subjects" @bind-Value="Form.Subject" ShowSemesters="true"/>
                        <MyTeacherPicker
                            @bind-Value="Form.Teacher"
                            Teachers="Teachers"/>
                        <MyCabinetPicker
                            @bind-Value="Form.Cabinet"
                            Cabinets="Cabinets"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public Schedule Schedule { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<Cabinet> Cabinets { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<Subject> Subjects { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<User> Teachers { get; set; } = null!;

    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public int Number { get; set; }

    [Parameter]
    public EventCallback<ClassScheduleReplacement> OnClassScheduleReplacementCreated { get; set; } = EventCallback<ClassScheduleReplacement>.Empty;

    public ComponentForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public ValidationMessageStore MessageStore { get; set; } = null!;

    public bool Visible { get; set; }

    public ScheduleAvailabilityFilter ScheduleAvailabilityFilter => new()
    {
        DayOfWeek = SelectedDate.DayOfWeek,
        Number = Number,
        ReplacementMode = true,
        WeekSeparation = WeekSeparationService.GetCurrentWeekSeparation(SelectedDate),
        Date = DateOnly.FromDateTime(SelectedDate)
    };

    private void OnCancel()
    {
        Visible = false;
    }

    private void OnOpen()
    {
        Form = new();
        EditContext = new(Form);
        MessageStore = new(EditContext);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var valid = EditContext.Validate();
        valid = await CheckTeacherAvailabilityAsync(context, valid);
        valid = await CheckCabinetAvailabilityAsync(context, valid);
        if (!Visible || !valid)
            return;

        var replace = new ClassScheduleReplacement
        {
            ScheduleId = Schedule.Id,
            SubjectId = Form.Subject!.Id,
            TeacherId = Form.Teacher?.Id,
            CabinetId = Form.Cabinet?.Id,
            Date = DateOnly.FromDateTime(SelectedDate),
            Number = Number,
            IsCancel = false,
            IsAddition = true
        };
        context.Add(replace);
        await context.SaveChangesAsync();
        replace.Subject = Form.Subject;
        replace.Teacher = Form.Teacher;
        replace.Cabinet = Form.Cabinet;
        replace.Schedule = Schedule;
        OnCancel();
        await OnClassScheduleReplacementCreated.InvokeAsync(replace);
    }

    private async Task<bool> CheckTeacherAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validTeacherPick, teacherPickError) = await context.ValidateTeacherAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter, Form.Teacher);
        if (validTeacherPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Teacher), teacherPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }

    private async Task<bool> CheckCabinetAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validCabinetPick, cabinetPickError) = await context.ValidateCabinetAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter, Form.Cabinet);
        if (validCabinetPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Cabinet), cabinetPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }

    public class ComponentForm
    {
        [MyRequired]
        [Display(Name = "Дисциплина")]
        public Subject? Subject { get; set; }

        public User? Teacher { get; set; }

        public Cabinet? Cabinet { get; set; }
    }

}