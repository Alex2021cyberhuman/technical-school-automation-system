@using Microsoft.EntityFrameworkCore
@using Application.Data
@using Application.Common.Data
@using Application.Schedules.Data
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<MainDbContext> DbContextFactory

<button type="button" class="btn btn-primary" @onclick="OnOpen">
    Добавить кабинет
</button>

@if (Visible)
{
    <PageTitle>Техникум - Добавить кабинет </PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить кабинет</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MyInputComponent Label="Название" Placeholder="Название" @bind-Value="Form.Name"/>
                        <MyInputComponent Label="Код" Placeholder="Код" @bind-Value="Form.Code"/>
                        <MyInputComponent Label="Профиль" Placeholder="Профиль" @bind-Value="Form.Profile"/>
                        <MyInputComponent Label="Отделение" Placeholder="Отделение" @bind-Value="Form.Wing"/>
                        <MudNumericField Label="Этаж" Placeholder="Этаж" @bind-Value="Form.Floor" Min="1" Max="100"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Добавить кабинет</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{

    public ComponentForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<Cabinet> OnCabinetCreated { get; set; } = EventCallback<Cabinet>.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnCancel()
    {
        Visible = false;
    }

    private void OnOpen()
    {
        Form = new ComponentForm();
        EditContext = new EditContext(Form);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible || !EditContext.Validate())
            return;
        var cabinet = new Cabinet
        {
            Name = Form.Name,
            Code = Form.Code,
            Profile = Form.Profile,
            Floor = Form.Floor,
            Wing = Form.Wing
        };
        await using var context = await DbContextFactory.CreateDbContextAsync();
        context.Add(cabinet);
        await context.SaveChangesAsync();
        OnCancel();
        await OnCabinetCreated.InvokeAsync(cabinet);
    }

    public class ComponentForm
    {
        [MyRequired]
        [Display(Name = "Название")]
        public string Name { get; set; } = string.Empty;

        [MyRequired]
        [Display(Name = "Код")]
        public string Code { get; set; } = string.Empty;

        public string Profile { get; set; } = string.Empty;

        public int Floor { get; set; } = 1;

        public string Wing { get; set; } = "Основное";
    }

}