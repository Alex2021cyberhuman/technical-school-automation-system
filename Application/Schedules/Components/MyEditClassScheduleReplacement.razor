@using Application.Schedules.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@using Application.Specialities.Data
@using Application.Common.Helpers
@using Application.Access.Data
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject IDialogService DialogService
@inject WeekSeparationService WeekSeparationService

@if (!ClassScheduleReplacement.IsCancel)
{
    <MudButton
        Class="replacements-cell-solid-item"
        Variant="Variant.Outlined"
        Color="Color.Primary"
        OnClick="OnOpen">
        <div class="replacements-cell-text">
            @if (ClassScheduleReplacement.ClassSchedule != null)
            {
                <strong>
                    Замена
                </strong>
            }
            else
            {
                <strong>
                    Добавление
                </strong>
            }
            @ClassScheduleReplacement.Subject!.Name
            @if (ClassScheduleReplacement.Cabinet != null)
            {
                <small>
                    (@ClassScheduleReplacement.Cabinet.Code)
                </small>
            }
            <br/>
            @if (ClassScheduleReplacement.Teacher != null)
            {
                <i>@ClassScheduleReplacement.Teacher.Initials</i>
            }
        </div>
    </MudButton>
}
else
{
    <MudButton
        Class="replacements-cell-solid-item"
        Variant="Variant.Outlined"
        Color="Color.Primary"
        OnClick="OnOpen">
        <div class="replacements-cell-text">
            <strong>
                Отмена
            </strong>
        </div>
    </MudButton>
}

@if (Visible)
{
    <PageTitle>Техникум - Редактировать замененный элемент расписания </PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Редактировать замененный элемент расписания</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MudField Label="День недели">@StringLocalizer[ClassScheduleReplacement.Date.DayOfWeek.ToString()]</MudField>
                        <MudField Label="Дата">@ClassScheduleReplacement.Date.ToShortDateString()</MudField>
                        <MudField Label="Номер урока">@ClassScheduleReplacement.Number</MudField>
                        @if (ClassScheduleReplacement.ClassSchedule != null)
                        {
                            <h6>Данные замененного элемента расписания</h6>
                            <MudField Label="Недельное разделение">@StringLocalizer[ClassScheduleReplacement.ClassSchedule.WeeksSeparation.ToString()]</MudField>
                            <MudField Label="Дисциплина">@ClassScheduleReplacement.ClassSchedule.Subject.Name</MudField>
                            <MudField Label="Учитель">@ClassScheduleReplacement.ClassSchedule.Teacher?.Initials.OrToDefault("Не выбрано")</MudField>
                            <MudField Label="Кабинет">@ClassScheduleReplacement.ClassSchedule.Cabinet?.Name.OrToDefault("Не выбрано")</MudField>
                        }
                        @if (!Form.IsAddition)
                        {
                            <MudSwitch T="bool" Label="Это отмена?" Color="Color.Primary" @bind-Checked="Form.IsCancel"/>
                        }
                        @if (!Form.IsCancel)
                        {
                            <MySubjectSelector Subjects="Subjects" @bind-Value="Form.Subject" ShowSemesters="true"/>
                            <MyTeacherPicker
                                @bind-Value="Form.Teacher"
                                Teachers="Teachers"/>
                            <MyCabinetPicker
                                @bind-Value="Form.Cabinet"
                                Cabinets="Cabinets"/>
                        }
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Сохранить</button>
                    <button type="button" class="btn btn-danger" @onclick="OnDeleteAsync">Удалить</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public IReadOnlyCollection<Cabinet> Cabinets { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<Subject> Subjects { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<User> Teachers { get; set; } = null!;

    [Parameter]
    public ClassScheduleReplacement ClassScheduleReplacement { get; set; } = null!;

    [Parameter]
    public EventCallback<ClassScheduleReplacement> OnEditClassScheduleReplacement { get; set; } = EventCallback<ClassScheduleReplacement>.Empty;

    [Parameter]
    public EventCallback<ClassScheduleReplacement> OnClassScheduleReplacementRemoved { get; set; } = EventCallback<ClassScheduleReplacement>.Empty;

    public ComponentForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public ValidationMessageStore MessageStore { get; set; } = null!;

    public bool Visible { get; set; }

    public ScheduleAvailabilityFilter ScheduleAvailabilityFilter => new()
    {
        DayOfWeek = ClassScheduleReplacement.Date.DayOfWeek,
        Number = ClassScheduleReplacement.Number,
        ReplacementMode = true,
        WeekSeparation = WeekSeparationService.GetCurrentWeekSeparation(ClassScheduleReplacement.Date.ToDateTime(TimeOnly.MinValue)),
        ClassScheduleId = ClassScheduleReplacement.ClassScheduleId,
        ClassScheduleReplacementId = ClassScheduleReplacement.Id,
        Date = ClassScheduleReplacement.Date
    };

    private void OnCancel()
    {
        Visible = false;
    }

    private void OnOpen()
    {
        Form = new(ClassScheduleReplacement);
        EditContext = new(Form);
        MessageStore = new(EditContext);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var valid = EditContext.Validate();
        valid = await CheckTeacherAvailabilityAsync(context, valid);
        valid = await CheckCabinetAvailabilityAsync(context, valid);
        if (!Visible || !valid)
            return;

        var replace = await context.ClassScheduleReplacement.SingleAsync(x => x.Id == ClassScheduleReplacement.Id);

        replace.IsCancel = Form.IsCancel;
        replace.SubjectId = Form.IsCancel ? null : Form.Subject?.Id;
        replace.TeacherId = Form.IsCancel ? null : Form.Teacher?.Id;
        replace.CabinetId = Form.IsCancel ? null : Form.Cabinet?.Id;

        await context.SaveChangesAsync();

        ClassScheduleReplacement.IsCancel = Form.IsCancel;
        ClassScheduleReplacement.Subject = Form.IsCancel ? null : Form.Subject;
        ClassScheduleReplacement.SubjectId = Form.IsCancel ? null : Form.Subject?.Id;
        ClassScheduleReplacement.Teacher = Form.IsCancel ? null : Form.Teacher;
        ClassScheduleReplacement.TeacherId = Form.IsCancel ? null : Form.Teacher?.Id;
        ClassScheduleReplacement.Cabinet = Form.IsCancel ? null : Form.Cabinet;
        ClassScheduleReplacement.CabinetId = Form.IsCancel ? null : Form.Cabinet?.Id;

        OnCancel();
        await OnEditClassScheduleReplacement.InvokeAsync(ClassScheduleReplacement);
    }

    private async Task OnDeleteAsync()
    {
        var result = await DialogService.ShowMessageBox("Удаление", "Удалить элемент расписания?", "Да", "Нет");
        if (result.GetValueOrDefault())
        {
            return;
        }
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var dbClassSchedule = await context.ClassScheduleReplacement.SingleAsync(x => x.Id == ClassScheduleReplacement.Id);
        context.Remove(dbClassSchedule);
        await context.SaveChangesAsync();
        OnCancel();
        await OnClassScheduleReplacementRemoved.InvokeAsync(ClassScheduleReplacement);
    }

    private async Task<bool> CheckTeacherAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validTeacherPick, teacherPickError) = await context.ValidateTeacherAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter, Form.Teacher);
        if (validTeacherPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Teacher), teacherPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }


    private async Task<bool> CheckCabinetAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validCabinetPick, cabinetPickError) = await context.ValidateCabinetAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter, Form.Cabinet);
        if (validCabinetPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Cabinet), cabinetPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }

    public class ComponentForm
    {
        public ComponentForm(ClassScheduleReplacement classScheduleReplacement)
        {
            Subject = classScheduleReplacement.Subject;
            Teacher = classScheduleReplacement.Teacher;
            Cabinet = classScheduleReplacement.Cabinet;
            IsCancel = classScheduleReplacement.IsCancel;
            IsAddition = classScheduleReplacement.IsAddition;
        }

        public Subject? Subject { get; set; }

        public User? Teacher { get; set; }

        public Cabinet? Cabinet { get; set; }

        public bool IsCancel { get; set; }

        public bool IsAddition { get; set; }
    }

}