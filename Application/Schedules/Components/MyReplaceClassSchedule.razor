@using Application.Schedules.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Application.Data
@using Application.Specialities.Data
@using Application.Common.Helpers
@using Application.Access.Data
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory

<MudButton
    Class="replacements-cell-solid-item"
    Variant="Variant.Outlined"
    Color="Color.Primary"
    OnClick="OnOpen">
    <div class="replacements-cell-text">
        <strong>
            @ClassSchedule.Subject.Name
        </strong>
        @if (ClassSchedule.Cabinet != null)
        {
            <small>
                (@ClassSchedule.Cabinet.Name)
            </small>
        }
        <br/>
        @if (ClassSchedule.Teacher != null)
        {
            <i>@ClassSchedule.Teacher.Initials</i>
        }
    </div>
</MudButton>

@if (Visible)
{
    <PageTitle>Заменить элемент расписания</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Заменить элемент расписания</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MudField Label="Дата">@SelectedDate.ToShortDateString()</MudField>
                        <MudField Label="День недели">@StringLocalizer[ClassSchedule.DayOfWeek.ToString()]</MudField>
                        <MudField Label="Номер урока">@ClassSchedule.Number</MudField>
                        <h6>Данные заменяемого элемента расписания</h6>
                        <MudField Label="Недельное разделение">@StringLocalizer[ClassSchedule.WeeksSeparation.ToString()]</MudField>
                        <MudField Label="Дисциплина">@ClassSchedule.Subject.Name</MudField>
                        <MudField Label="Учитель">@ClassSchedule.Teacher?.Initials.OrToDefault("Не выбрано")</MudField>
                        <MudField Label="Кабинет">@ClassSchedule.Cabinet?.Name.OrToDefault("Не выбрано")</MudField>
                        <MudSwitch T="bool" Label="Это отмена?" Color="Color.Primary" @bind-Checked="Form.IsCancel"/>
                        @if (!Form.IsCancel)
                        {
                            <MySubjectSelector Subjects="Subjects" @bind-Value="Form.Subject" ShowSemesters="true"/>
                            <MyTeacherPicker
                                @bind-Value="Form.Teacher"
                                Teachers="Teachers"/>
                            <MyCabinetPicker
                                @bind-Value="Form.Cabinet"
                                Cabinets="Cabinets"/>
                        }
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public ClassSchedule ClassSchedule { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<Cabinet> Cabinets { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<Subject> Subjects { get; set; } = null!;

    [Parameter]
    public IReadOnlyCollection<User> Teachers { get; set; } = null!;

    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public EventCallback<ClassScheduleReplacement> OnReplaceClassSchedule { get; set; } = EventCallback<ClassScheduleReplacement>.Empty;
    
    public ComponentForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public ValidationMessageStore MessageStore { get; set; } = null!;

    public bool Visible { get; set; }

    public ScheduleAvailabilityFilter ScheduleAvailabilityFilter => new()
    {
        DayOfWeek = SelectedDate.DayOfWeek,
        Number = ClassSchedule.Number,
        ReplacementMode = true,
        WeekSeparation = ClassSchedule.WeeksSeparation,
        ClassScheduleId = ClassSchedule.Id,
        Date = DateOnly.FromDateTime(SelectedDate)
    };

    private void OnCancel()
    {
        Visible = false;
    }

    private void OnOpen()
    {
        Form = new(ClassSchedule);
        EditContext = new(Form);
        MessageStore = new(EditContext);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var valid = EditContext.Validate();
        valid = await CheckTeacherAvailabilityAsync(context, valid);
        valid = await CheckCabinetAvailabilityAsync(context, valid);
        if (!Visible || !valid)
            return;
        
        var replace = new ClassScheduleReplacement
        {
            ClassScheduleId = ClassSchedule.Id,
            ScheduleId = ClassSchedule.ScheduleId,
            SubjectId = Form.IsCancel ? null : Form.Subject.Id,
            TeacherId = Form.IsCancel ? null : Form.Teacher?.Id,
            CabinetId = Form.IsCancel ? null : Form.Cabinet?.Id,
            Date = DateOnly.FromDateTime(SelectedDate),
            Number = ClassSchedule.Number,
            IsCancel = Form.IsCancel
        };
        
        context.Add(replace);
        await context.SaveChangesAsync();
        replace.Subject = Form.IsCancel ? null : Form.Subject;
        replace.Teacher = Form.IsCancel ? null : Form.Teacher;
        replace.Cabinet = Form.IsCancel ? null : Form.Cabinet;
        replace.ClassSchedule = ClassSchedule;
        OnCancel();
        await OnReplaceClassSchedule.InvokeAsync(replace);
    } 
    
    private async Task<bool> CheckTeacherAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validTeacherPick, teacherPickError) = await context.ValidateTeacherAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter, Form.Teacher);
        if (validTeacherPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Teacher), teacherPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }


    private async Task<bool> CheckCabinetAvailabilityAsync(MainDbContext context, bool valid)
    {
        var (validCabinetPick, cabinetPickError) = await context.ValidateCabinetAvailabilityAsync(StringLocalizer, ScheduleAvailabilityFilter , Form.Cabinet);
        if (validCabinetPick) return valid;

        MessageStore.Add(FieldIdentifier.Create(() => Form.Cabinet), cabinetPickError);
        EditContext.NotifyValidationStateChanged();
        return false;
    }


    public class ComponentForm
    {
        public ComponentForm(ClassSchedule classSchedule)
        {
            Subject = classSchedule.Subject;
            Teacher = classSchedule.Teacher;
            Cabinet = classSchedule.Cabinet;
        }

        public Subject Subject { get; set; }

        public User? Teacher { get; set; }

        public Cabinet? Cabinet { get; set; }

        public bool IsCancel { get; set; }
    }

}