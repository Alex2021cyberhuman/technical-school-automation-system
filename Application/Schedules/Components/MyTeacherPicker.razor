@using Application.Specialities.Data
@using Application.Access.Data
@using Application.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@using Application.Schedules.Data
@using Microsoft.Extensions.Localization
@inherits MudBaseInput<Application.Access.Data.User?>
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject ILogger<MyTeacherPicker> Logger
@inject IStringLocalizer StringLocalizer
<MudField Label="Учитель">
    @if (Value is null)
    {
        <MudText>Не выбрано</MudText>
    }
    else
    {
        <MudText>@Value?.FullName</MudText>
    }
    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpenTeacherList" Icon="@(TeacherListVisible ? Icons.Filled.Close : Icons.Filled.MenuOpen)" Title="Список учителей" Size="Size.Small"/>
    <MudIconButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeselectAsync" Icon="@Icons.Filled.Cancel" Title="Отменить" Size="Size.Small"/>
</MudField>
@if (TeacherListVisible)
{
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document" style="max-width: 847px!important;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выбор Учителя</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="ToggleOpenTeacherList">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudTable T="User" Items="@Teachers" Hover="true" SortLabel="Сортировать по" Filter="Filter" SelectedItemChanged="OnSelectedItemChangedAsync">
                        <ToolBarContent>
                            <MudTextField @bind-Value="SearchString" Placeholder="Поиск Учителя" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="User" SortBy="teacher => teacher.FullName">ФИО</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="User" SortBy="teacher => teacher.Profile">Профиль</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="User" SortBy="teacher => teacher.UserName">Имя пользователя</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="User" SortBy="teacher => teacher.Email">Email</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="ФИО">@context.FullName</MudTd>
                            <MudTd DataLabel="Профиль">@context.Profile</MudTd>
                            <MudTd DataLabel="Имя пользователя">@context.UserName</MudTd>
                            <MudTd DataLabel="Email">@context.Email</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleOpenTeacherList">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{

    [Parameter]
    public Expression<Func<User>>? ValueExpression { get; set; }

    [Parameter]
    public IReadOnlyCollection<User> Teachers { get; set; } = new List<User>();

    [CascadingParameter]
    EditContext? CascadedEditContext { get; set; }

    [Parameter]
    public ScheduleAvailabilityFilter ScheduleAvailabilityFilterFilter { get; set; } = new();

    public FieldIdentifier FieldIdentifier { get; set; }

    public string SearchString { get; set; } = string.Empty;

    public bool TeacherListVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (CascadedEditContext is not null)
        {
            FieldIdentifier = FieldIdentifier.Create(ValueExpression!);
        }
    }

    private void ToggleOpenTeacherList()
    {
        TeacherListVisible = !TeacherListVisible;
    }

    private bool Filter(User teacher)
    {
        return string.IsNullOrWhiteSpace(SearchString) ||
               string.Join(
                   teacher.FullName,
                   teacher.Profile,
                   teacher.UserName,
                   teacher.Email).Contains(SearchString, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task OnSelectedItemChangedAsync(User teacher)
    {
        Value = teacher;
        await ValueChanged.InvokeAsync(Value);
        CascadedEditContext?.NotifyFieldChanged(FieldIdentifier);
        ToggleOpenTeacherList();
    }

    private async Task DeselectAsync()
    {
        Value = null;
        await ValueChanged.InvokeAsync(Value);
    }
}