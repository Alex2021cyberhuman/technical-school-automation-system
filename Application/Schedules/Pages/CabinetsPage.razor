@page "/cabinets"
@attribute [Authorize]
@using Application.Access.Enums
@using Application.Schedules.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Application.Data
@using System.Security.Claims
@inject IDbContextFactory<MainDbContext> DbContextFactory

<PageTitle>Техникум - Кабинеты </PageTitle>
<h3>Кабинеты</h3>
<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            @if (CurrentUser.IsInPolicy(PolicyIdentifiers.Administration))
            {
                <MyCreateCabinetModal OnCabinetCreated="OnCabinetCreated"/>
            }
        </MudItem>
        <MudItem xs="12">
            <MudTable T="Cabinet" Items="@Cabinets" Hover="true" SortLabel="Сортировать по" Filter="Filter">
                <ToolBarContent>
                    <MudTextField @bind-Value="SearchString" Placeholder="Поиск кабинета" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Code.ToNaturalSortString()">Код</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Profile">Профиль</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Name">Название</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Floor">Этаж</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Cabinet" SortBy="cabinet => cabinet.Wing">Отделение</MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Код">@context.Code</MudTd>
                    <MudTd DataLabel="Профиль">@context.Profile</MudTd>
                    <MudTd DataLabel="Название">@context.Name</MudTd>
                    <MudTd DataLabel="Этаж">@context.Floor</MudTd>
                    <MudTd DataLabel="Отделение">@context.Wing</MudTd>
                    <MudTd>
                        @if (CurrentUser.IsInPolicy(PolicyIdentifiers.Administration))
                        {
                            <MyEditCabinetModal
                                Cabinet="context"
                                OnCabinetEdited="OnCabinetEdited"
                                OnCabinetRemoved="OnCabinetRemoved"/>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    private List<Cabinet> Cabinets { get; set; } = new();

    private string SearchString { get; set; } = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private ClaimsPrincipal CurrentUser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CurrentUser = (await AuthenticationStateTask).User;
        await LoadCabinetsAsync();
    }

    private async Task LoadCabinetsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Cabinets = await context.Cabinet
            .OrderBy(x => x.Name)
            .ToListAsync();
    }

    private bool Filter(Cabinet cabinet)
    {
        return string.IsNullOrWhiteSpace(SearchString) || string.Join(" ", cabinet.Code, cabinet.Name, cabinet.Floor.ToString(), cabinet.Profile, cabinet.Wing)
            .Contains(
                SearchString,
                StringComparison.CurrentCultureIgnoreCase);
    }


    private void OnCabinetCreated(Cabinet cabinet)
    {
        Cabinets.Add(cabinet);
    }

    private void OnCabinetRemoved(Cabinet cabinet)
    {
        Cabinets.RemoveAll(x => x.Id == cabinet.Id);
    }

    private void OnCabinetEdited(Cabinet cabinet)
    {
        var index = Cabinets.FindIndex(x => x.Id == cabinet.Id);
        if (index < 0) return;
        Cabinets[index] = cabinet;
    }

}