@page "/schedule/manage"
@attribute [Authorize(Policy = PolicyIdentifiers.ScheduleManagers)]
@using Application.Schedules.Data
@using Application.Specialities.Data
@using Application.Groups.Data
@using Microsoft.EntityFrameworkCore
@using Application.Data
@using Application.Access.Data
@using Application.Access.Enums
@using Application.Schedules.Services.GroupsSchedule
@using Application.Schedules.Services.ReplacementSchedule
@using Application.Schedules.Services.TeacherReplacementSchedule
@using Application.Schedules.Services.TeacherSchedule
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject IDbContextFactory<AccessDbContext> AccessDbContextFactory
@inject NavigationManager NavigationManager
@inject TeacherScheduleGenerator TeacherScheduleGenerator
@inject GroupsScheduleGenerator GroupsScheduleGenerator
@inject ReplacementScheduleGenerator ReplacementScheduleGenerator
@inject TeacherReplacementScheduleGenerator TeacherReplacementScheduleGenerator
@inject IDialogService DialogService
<PageTitle>Техникум - Расписание </PageTitle>
<h3>Расписание</h3>
<MudGrid>

    <MudItem xs="12">
        <MudButtonGroup VerticalAlign="true">
            <MudButton OnClick="GetTeacherScheduleAsync">Загрузить учительское расписание</MudButton>
            <MudButton OnClick="GetGroupsScheduleAsync">Загрузить расписание</MudButton>
            <MudButton OnClick="GetReplacementsScheduleAsync">Загрузить изменения</MudButton>
            <MudButton OnClick="GetTeacherReplacementsScheduleAsync">Загрузить изменения для учителей</MudButton>
        </MudButtonGroup>
    </MudItem>
    <MudItem xs="2">
        <MudList Clickable="true" SelectedValue="SelectedSpeciality" SelectedValueChanged="SelectSpecialityAsync">
            @if (SelectedSpeciality is not null)
            {
                <MudListSubheader>
                    Выбранная специальность:
                    @SelectedSpeciality.Code @SelectedSpeciality.Name
                </MudListSubheader>
            }
            @foreach (var speciality in Specialities)
            {
                <MudListItem Text="@speciality.Name" Value="@speciality"/>
            }
        </MudList>
    </MudItem>
    @if (SelectedSpeciality is not null)
    {
        <MudItem xs="2">
            <MudList Clickable="true" SelectedValue="SelectedGroup" SelectedValueChanged="SelectGroupAsync">
                @if (SelectedGroup is not null)
                {
                    <MudListSubheader>
                        Выбранная группа:
                        @SelectedGroup.Name
                    </MudListSubheader>
                }
                @foreach (var group in Groups)
                {
                    <MudListItem Text="@group.Name" Value="@group"/>
                }
            </MudList>
        </MudItem>
        <MudItem xs="8">
            @if (SelectedSchedule is not null)
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                    <MudTabPanel Text="Основное расписание">
                        <MyClassSchedulePanel
                            Teachers="Teachers"
                            Cabinets="Cabinets"
                            Schedule="SelectedSchedule"
                            Subjects="Subjects"
                            MaxNumber="MaxNumber"
                            DayOfWeeks="DayOfWeeks"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Расписание на определенную дату">
                        <MyClassScheduleReplacementPanel
                            Teachers="Teachers"
                            Cabinets="Cabinets"
                            Schedule="SelectedSchedule"
                            Subjects="Subjects"
                            MaxNumber="MaxNumber"
                            DayOfWeeks="DayOfWeeks"/>
                    </MudTabPanel>
                </MudTabs>
            }
        </MudItem>
    }
</MudGrid>

@code {

    public List<Cabinet> Cabinets { get; set; } = null!;

    public List<User> Teachers { get; set; } = new();

    private Speciality? SelectedSpeciality { get; set; }

    private List<Speciality> Specialities { get; set; } = new();

    private List<Group> Groups { get; set; } = new();

    private Schedule? SelectedSchedule { get; set; }

    private Group? SelectedGroup { get; set; }

    private List<Subject> Subjects { get; set; } = new();

    private int MaxNumber { get; } = 7;

    private DayOfWeek[] DayOfWeeks { get; } = {
        DayOfWeek.Monday,
        DayOfWeek.Tuesday,
        DayOfWeek.Wednesday,
        DayOfWeek.Thursday,
        DayOfWeek.Friday
    };

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Specialities = await context.Speciality
            .OrderBy(x => x.Name)
            .ToListAsync();
        await using var accessContext = await AccessDbContextFactory.CreateDbContextAsync();
        var nowOffset = DateTimeOffset.UtcNow;
        Teachers = await accessContext.Users
            .Where(x => x.UserRoles.Any(role => role.Role.Name == RoleIdentifiers.Teacher))
            .Where(x => !x.LockoutEnd.HasValue || x.LockoutEnd <= nowOffset)
            .ToListAsync();
        Cabinets = await context.Cabinet
            .ToListAsync();
    }

    private async Task SelectSpecialityAsync(object obj)
    {
        if (obj is not Speciality speciality || ReferenceEquals(speciality, SelectedSpeciality))
        {
            return;
        }
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var year = DateTime.Today.Year;
        Groups = await context.Group
            .AsNoTracking()
            .Where(x => x.SpecialityId == speciality.Id)
            .Where(x => x.GraduationYear >= year)
            .OrderBy(x => x.EnrollmentYear)
            .ThenBy(x => x.Name)
            .ToListAsync();
        Subjects = await context.Subject
            .AsNoTracking()
            .Where(x => x.SpecialityId == speciality.Id)
            .Include(x => x.Semesters)
            .Include(x => x.Speciality)
            .ToListAsync();
        SelectedSpeciality = speciality;
        SelectedGroup = null;
        SelectedSchedule = null;
    }

    private async Task SelectGroupAsync(object obj)
    {
        if (obj is not Group group || ReferenceEquals(group, SelectedGroup))
        {
            return;
        }
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var schedule = await context.Schedule.FirstOrDefaultAsync(x => x.GroupId == group.Id);
        if (schedule is null)
        {
            schedule = new()
            {
                GroupId = group.Id
            };
            context.Add(schedule);
            await context.SaveChangesAsync();
        }
        SelectedSchedule = schedule;
        SelectedGroup = group;
    }

    private async Task GetTeacherScheduleAsync()
    {
        var filename = await TeacherScheduleGenerator.GenerateScheduleAndSaveAsync();
        NavigationManager.NavigateTo(NavigationManager.BaseUri + filename, true);
    }

    private async Task GetGroupsScheduleAsync()
    {
        var filename = await GroupsScheduleGenerator.GenerateScheduleAndSaveAsync();
        NavigationManager.NavigateTo(NavigationManager.BaseUri + filename, true);
    }

    private async Task GetReplacementsScheduleAsync()
    {
        var dialog = DialogService.Show<MyWorkDatePickerDialog>();
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is DateTime moment)
        {
            var filename = await ReplacementScheduleGenerator.GenerateScheduleAndSaveAsync(moment);
            NavigationManager.NavigateTo(NavigationManager.BaseUri + filename, true);
        }
    }

    private async Task GetTeacherReplacementsScheduleAsync()
    {
        var dialog = DialogService.Show<MyWorkDatePickerDialog>();
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is DateTime moment)
        {
            var filename = await TeacherReplacementScheduleGenerator.GenerateScheduleAndSaveAsync(moment);
            NavigationManager.NavigateTo(NavigationManager.BaseUri + filename, true);
        }
    }

}