@using Microsoft.Extensions.Localization
@typeparam TValue where TValue : struct, Enum
@inherits MudBaseInput<TValue?>
@inject IStringLocalizer StringLocalizer

<MudSelect T="TValue" Label="@Label" AnchorOrigin="Origin.BottomCenter" ValueChanged="CallbackAsync" Required="@Required" ToStringFunc="GetLocalizedString">
    @foreach (var item in Items)
    {
        <MudSelectItem Value="@item"/>
    }
</MudSelect>

@code {

    public TValue[] Items { get; set; } = Array.Empty<TValue>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var enums = Enum.GetValues<TValue>();
        enums = enums.OrderBy(GetLocalizedString).ToArray();
        Items = enums;
        if (Required)
            Value = enums.First();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private string GetLocalizedString(TValue value)
    {
        return StringLocalizer[value.ToString()];
    }

    private async Task CallbackAsync(TValue value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

}