@using Microsoft.Extensions.Localization
@using System.Linq.Expressions
@typeparam TValue where TValue : struct, Enum
@inherits MudBaseInput<TValue?>
@inject IStringLocalizer StringLocalizer

<MudSelect T="TValue" Label="@(Value.HasValue ? Label : Label + " (все)")" Placeholder="@(string.IsNullOrWhiteSpace(Placeholder) ? Label : Placeholder)" AnchorOrigin="Origin.BottomCenter" Value="@(Value ?? default)" ValueChanged="CallbackAsync" Required="@Required" ToStringFunc="GetLocalizedString">
    @foreach (var item in Items)
    {
        <MudSelectItem Value="@item"/>
    }
</MudSelect>

@code
{
    [CascadingParameter]
    EditContext? CascadedEditContext { get; set; }

    public TValue[] Items { get; set; } = Array.Empty<TValue>();

    [Parameter]
    public Expression<Func<TValue?>>? ValueExpression { get; set; }

    private FieldIdentifier? Identifier { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var enums = Enum.GetValues<TValue>();
        enums = enums.OrderBy(x => GetLocalizedString(x)).ToArray();
        Items = enums;
        if (Required && !Value.HasValue)
        {
            Value = enums.First();
        }
        await ValueChanged.InvokeAsync(Value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (ValueExpression is not null)
        {
            Identifier = FieldIdentifier.Create(ValueExpression);
        }
    }

    private string GetLocalizedString(TValue value)
    {
        return StringLocalizer[value.ToString()];
    }

    private async Task CallbackAsync(TValue value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
        if (Identifier.HasValue && CascadedEditContext is not null)
        {
            CascadedEditContext.NotifyFieldChanged(Identifier.Value);
        }
    }

}