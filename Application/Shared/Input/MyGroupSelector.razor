@using Application.Groups.Data
@inherits MudSelect<Group>

<MudSelect T="Group" Label="Группа" AnchorOrigin="Origin.BottomCenter" ValueChanged="OnValueChanged" Value="Value" ToStringFunc="GetGroupSelect">
    @foreach (var group in Groups)
    {
        <MudSelectItem Value="group"/>
    }
</MudSelect>

@code
{
    [Parameter]
    public IReadOnlyCollection<Group> Groups { get; set; } = new List<Group>();

    private static string GetGroupSelect(Group arg)
    {
        return arg?.Name ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);
        }
        catch (JSException)
        {
    // NOOP
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Value is null && Groups.Any())
        {
            Value = Groups.First();
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task OnValueChanged(Group arg)
    {
        await SetValueAsync(arg);
    }
}