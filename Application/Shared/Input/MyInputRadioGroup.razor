@using System.Globalization
@typeparam TValue
@inherits InputBase<TValue>

<div class="form-check">
    <fieldset>
        <legend>@Label</legend>
        <InputRadioGroup @bind-Value="Value">
            @foreach (var radioItem in ValuesTuples)
            {
                <label>
                    <InputRadio Value="@radioItem.Value"/>
                    @radioItem.Label
                </label>
            }
        </InputRadioGroup>
    </fieldset>
</div>

@code {

    private string _name = string.Empty;

    [Parameter]
    public IReadOnlyCollection<RadioItem> ValuesTuples { get; set; } = Array.Empty<RadioItem>();

    [Parameter]
    public string Name
    {
        get => string.IsNullOrWhiteSpace(_name) ? SetName() : _name;
        set => _name = value;
    }

    [Parameter]
    public string Label { get; set; } = string.Empty;

    private string SetName()
    {
        var typeName = typeof(TValue).Name;
        _name = typeName;
        return _name;
    }

    public class RadioItem
    {
        public RadioItem(string label, TValue value)
        {
            Label = label;
            Value = value;
        }

        public string Label { get; set; }

        public TValue Value { get; set; }
    }

    protected override bool TryParseValueFromString(
        string? value,
        out TValue result,
        out string errorMessage)
    {
        var success = BindConverter.TryConvertTo<TValue>(
            value, CultureInfo.CurrentCulture, out var parsedValue);
        if (success)
        {
            result = parsedValue!;
            errorMessage = null!;

            return true;
        }
        result = default!;
        errorMessage = $"{FieldIdentifier.FieldName} не получилось конвертировать.";

        return false;
    }

}