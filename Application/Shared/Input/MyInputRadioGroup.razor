@using System.Linq.Expressions
@using Microsoft.Extensions.Localization
@using System.Globalization
@typeparam TValue
@inherits InputBase<TValue>
@inject IStringLocalizer StringLocalizer
<div class="form-control-wrapper">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="form-control-label">@Label</label>
    }
    <div class="container">
        <InputRadioGroup @bind-Value="CurrentValue">
            <div class="row justify-content-start">
                @foreach (var radioItem in RadioItems)
                {
                    <div class="col-sm-12 col-lg-4">
                        <label>
                            <InputRadio Value="@radioItem.Value"/>
                            @radioItem.Label
                        </label>
                    </div>
                }
            </div>
        </InputRadioGroup>
    </div>
</div>

@code {

    [Parameter]
    public List<ValueRadioItem<TValue>> RadioItems { get; set; } = new();

    [Parameter]
    public string Label { get; set; } = string.Empty;

    protected override bool TryParseValueFromString(
        string? value,
        out TValue result,
        out string errorMessage)
    {
        var success = BindConverter.TryConvertTo<TValue>(
            value, CultureInfo.CurrentCulture, out var parsedValue);
        if (success)
        {
            result = parsedValue!;
            errorMessage = null!;

            return true;
        }
        result = default!;
        errorMessage = $"{FieldIdentifier.FieldName} не получилось конвертировать.";

        return false;
    }

}