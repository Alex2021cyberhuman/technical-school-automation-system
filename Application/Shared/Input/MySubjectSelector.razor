@using Application.Specialities.Data
@inherits MudBaseInput<Application.Specialities.Data.Subject>

<MudField Label="Дисциплина" Variant="Variant.Text">
    <MudText>@Value.Name</MudText>
    @if (Value != null && ShowSemesters)
    {
        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpenSemesterList" Icon="@(SubjectListVisible ? Icons.Filled.Close : Icons.Filled.Info)" Title="Список семестров" Size="Size.Small"/>
    }
    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpenSubjectList" Icon="@(SubjectListVisible ? Icons.Filled.Close : Icons.Filled.MenuOpen)" Title="Список дисциплин" Size="Size.Small"/>
</MudField>
@if (SubjectListVisible)
{
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document" style="max-width: 847px!important;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выбор дисциплины</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="ToggleOpenSubjectList">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudTable T="Subject" Items="@Subjects" Hover="true" SortLabel="Сортировать по" Filter="Filter" @ref="MudTable" SelectedItemChanged="OnSelectedItemChangedAsync">
                        <ToolBarContent>
                            <MudTextField @bind-Value="SearchString" Placeholder="Поиск дисциплины" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Code">Шифр</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Name">Название</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Speciality.Code">Код специальности</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Speciality.Name">Название специальности</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Название">@context.Name</MudTd>
                            <MudTd DataLabel="Код">@context.Code</MudTd>
                            <MudTd DataLabel="Название специальности">@context.Speciality.Name</MudTd>
                            <MudTd DataLabel="Код специальности">@context.Speciality.Code</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleOpenSubjectList">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}
else if (Value != null && SemesterListVisible)
{
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выбор дисциплины</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="ToggleOpenSemesterList">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudField Label="Название специальности">@Value.Speciality.Name</MudField>
                    <MudField Label="Код специальности">@Value.Speciality.Code</MudField>
                    <MudField Label="Название">@Value.Name</MudField>
                    <MudField Label="Код">@Value.Code</MudField>
                    <MudInputLabel>Часы по семестрам</MudInputLabel>
                    <div class="row justify-content-between">
                        @foreach (var semester in Value.Semesters.OrderBy(x => x.Number))
                        {
                            var label = $"Семестр №{semester.Number}";
                            <div class="col-sm-12 col-lg-4">
                                <MudField Label="@label">@semester.Hours</MudField>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleOpenSemesterList">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{

    [Parameter]
    public bool ShowSemesters { get; set; }

    [Parameter]
    public IReadOnlyCollection<Subject> Subjects { get; set; } = new List<Subject>();

    public string SearchString { get; set; } = string.Empty;

    public bool SubjectListVisible { get; set; }

    public bool SemesterListVisible { get; set; }

    public MudTable<Subject>? MudTable { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Value is not null || !Subjects.Any()) return;
        Value = Subjects.First();
        await ValueChanged.InvokeAsync(Value);
        MudTable?.SetSelectedItem(Value);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            await base.SetParametersAsync(parameters);
        }
        catch (InvalidOperationException invalidOperationException)
        {
            //
        }
    }

    private void ToggleOpenSubjectList()
    {
        SubjectListVisible = !SubjectListVisible;
    }

    private void ToggleOpenSemesterList()
    {
        SemesterListVisible = !SemesterListVisible;
    }

    private bool Filter(Subject subject)
    {
        return string.IsNullOrWhiteSpace(SearchString) ||
               subject.Code.Contains(SearchString) ||
               subject.Name.Contains(SearchString) ||
               subject.Speciality.Code.Contains(SearchString) ||
               subject.Speciality.Name.Contains(SearchString);
    }

    private async Task OnSelectedItemChangedAsync(Subject obj)
    {
        Value = obj;
        await ValueChanged.InvokeAsync(Value);
        ToggleOpenSubjectList();
    }

}