@using Application.Specialities.Data
@inherits MudBaseInput<Application.Specialities.Data.Subject>

<MudField Label="Дисциплина" Variant="Variant.Text">
    <MudText>@Value.Name</MudText>
    <MudDivider Vertical="true" FlexItem="true"/>
    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpen" Icon="@(IsOpen ? Icons.Filled.Close : Icons.Filled.MenuOpen)" Size="Size.Small"/>
</MudField>
@if (IsOpen)
{
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document" style="max-width: 847px!important;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выбор дисциплины</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="ToggleOpen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <MudTable T="Subject" Items="@Subjects" Hover="true" SortLabel="Сортировать по" Filter="Filter" @ref="MudTable" SelectedItemChanged="OnSelectedItemChangedAsync">
                        <ToolBarContent>
                            <MudTextField @bind-Value="SearchString" Placeholder="Поиск дисциплины" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Code">Шифр</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Name">Название</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Speciality.Code">Код специальности</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel T="Subject" SortBy="subject => subject.Speciality.Name">Название специальности</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Название">@context.Name</MudTd>
                            <MudTd DataLabel="Код">@context.Code</MudTd>
                            <MudTd DataLabel="Название">@context.Speciality.Name</MudTd>
                            <MudTd DataLabel="Код">@context.Speciality.Code</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleOpen">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public IReadOnlyCollection<Subject> Subjects { get; set; } = new List<Subject>();

    public string SearchString { get; set; } = string.Empty;

    public bool IsOpen { get; set; }

    public MudTable<Subject>? MudTable { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Value is not null || !Subjects.Any()) return;
        Value = Subjects.First();
        MudTable?.SetSelectedItem(Value);
    }

    private void ToggleOpen()
    {
        IsOpen = !IsOpen;
    }

    private bool Filter(Subject subject)
    {
        return string.IsNullOrWhiteSpace(SearchString) ||
               subject.Code.Contains(SearchString) ||
               subject.Name.Contains(SearchString) ||
               subject.Speciality.Code.Contains(SearchString) ||
               subject.Speciality.Name.Contains(SearchString);
    }

    private async Task OnSelectedItemChangedAsync(Subject obj)
    {
        Value = obj;
        ToggleOpen();
        await ValueChanged.InvokeAsync(Value);
    }
}

