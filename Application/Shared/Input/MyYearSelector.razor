@using Microsoft.CodeAnalysis
@using System.Linq.Expressions
@using Humanizer
@inherits MudSelect<int>

<MudSelect
    Label="@(string.IsNullOrWhiteSpace(Label) ? "Год" : Label)"
    Placeholder="@(string.IsNullOrWhiteSpace(Placeholder) ? string.IsNullOrWhiteSpace(Label) ? "Год" : Label : Placeholder)"
    T="int"
    AnchorOrigin="Origin.BottomCenter"
    Value="Value"
    ValueChanged="OnValueChangedAsync"
    ToStringFunc="GetYearString">
    @foreach (var year in Years)
    {
        <MudSelectItem Value="@year"/>
    }
</MudSelect>

@code
{
    [CascadingParameter]
    EditContext? CascadedEditContext { get; set; }

    [Parameter]
    public int MinimalYear { get; set; } = 1949;

    [Parameter]
    public int MaximumYear { get; set; } = DateTime.Now.Year;

    public List<int> Years => Enumerable.Range(MinimalYear, MaximumYear - MinimalYear + 1).OrderByDescending(x => x).ToList();

    [Parameter]
    public Expression<Func<int>>? ValueExpression { get; set; }

    private FieldIdentifier? Identifier { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Value == default)
        {
            await SetValueAsync(MaximumYear);
        }
        if (ValueExpression is not null)
        {
            Identifier = FieldIdentifier.Create(ValueExpression);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);
        }
        catch (JSException)
        {
    // NOOP
        }
    }

    private string GetYearString(int year)
    {
        return year == default ? string.Empty : year.ToString();
    }

    private async Task OnValueChangedAsync(int year)
    {
        if (Value == year)
            return;
        
        Value = year;
        await ValueChanged.InvokeAsync(Value);
        if (Identifier.HasValue && CascadedEditContext is not null)
        {
            CascadedEditContext.NotifyFieldChanged(Identifier.Value);
        }
    }
}