@using Application.Specialities.Data
@using Application.Specialities.Forms
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SpecialitiesDbContext> DbContextFactory
    
<button type="button" class="btn btn-primary" @onclick="OnOpen">
    Добавить дисциплину
</button>

@if (Visible)
{
    <PageTitle>Добавить дисциплину</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Добавить дисциплину</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <ValidationSummary/>
                        <MyInputComponent Label="Название" Placeholder="Название" @bind-Value="Form.Name" ValidationFor="() => Form.Name"/>
                        <MyInputComponent Label="Код" Placeholder="Код" @bind-Value="Form.Code" ValidationFor="() => Form.Code"/>
                        @foreach (var semester in Form.Semesters)
                        {
                            var label = $"Семестр №{semester.Number}";
                            <MudNumericField Label="@label" @bind-Value="@semester.Hours" Min="0" Max="4380"/>
                        }
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Добавить дисциплину</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public CreateSubjectForm Form { get; set; }

    public EditContext EditContext { get; set; }

    public bool Visible { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; } = EventCallback.Empty;

    [Parameter]
    public Speciality Speciality { get; set; } = new();
    
    public CreateSubjectModal()
    {
        Form = new CreateSubjectForm();
        EditContext = new EditContext(Form);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnCancel()
    {
        Visible = false;
        Form = new CreateSubjectForm();
        EditContext = new EditContext(Form);
    }

    private void OnOpen()
    {
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible || !EditContext.Validate())
            return;
        var subject = Form.ToSubject(Speciality.Id);
        await using var context = await DbContextFactory.CreateDbContextAsync();
        context.Add(subject);
        await context.SaveChangesAsync();
        OnCancel();
        await OnSubmit.InvokeAsync();
    }
}