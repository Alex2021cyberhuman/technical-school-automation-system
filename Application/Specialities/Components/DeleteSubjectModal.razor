@using Application.Specialities.Data
@using Application.Specialities.Forms
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SpecialitiesDbContext> DbContextFactory
    
<button type="button" class="btn btn-primary" @onclick="OnOpen">
    Удалить дисцеплину
</button>

@if (Visible)
{
    <PageTitle>Удалить дисцеплину</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Удалить дисцеплину</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="alert-danger">Вы действительно хотите удалить дисцеплину @Subject.Code @Subject.Name?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Удалить дисцеплину</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; } = EventCallback.Empty;

    [Parameter]
    public Speciality Speciality { get; set; } = new();

    [Parameter]
    public Subject Subject { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnCancel()
    {
        Visible = false;
    }

    private void OnOpen()
    {
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible)
            return;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var subject = await context.Subject.FirstOrDefaultAsync(x => x.Id == Subject.Id);
        if (subject is null)
        {
            OnCancel();
            return;
        }
        context.Subject.Remove(subject);
        await context.SaveChangesAsync();
        await OnSubmit.InvokeAsync();
    }
}