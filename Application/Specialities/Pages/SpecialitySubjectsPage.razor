@page "/speciality/{specialityId:long}/subjects"
@attribute [Authorize(Policy = PolicyIdentifiers.Administration)]
@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore
@using Application.Access.Enums
@using Application.Data
@inject IDbContextFactory<MainDbContext> DbContextFactory

@if (Speciality.Id != SpecialityId)
{
    <PageTitle>Не найдено!</PageTitle>
    <h3>Ничего не найдено!</h3>
}
else
{
    <PageTitle>Специальность @Speciality.Code @Speciality.Name</PageTitle>
    <h3>Специальность @Speciality.Code @Speciality.Name</h3>
    <CreateSubjectModal Speciality="@Speciality" OnSubmit="RefreshAsync"/>
    <MudTable Items="@Subjects" Hover="true" SortLabel="Сортировать по" Filter="Filter">
        <ToolBarContent>
            <MudTextField @bind-Value="SearchString" Placeholder="Поиск дисциплины" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel T="Subject" SortBy="subject => subject.Name">Название</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="Subject" SortBy="subject => subject.Code">Шифр</MudTableSortLabel>
            </MudTh>
            <MudTh>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Название">@context.Name</MudTd>
            <MudTd DataLabel="Код">@context.Code</MudTd>
            <MudTd>
                <EditSubjectModal Speciality="Speciality" Subject="@context" OnSubmit="RefreshAsync"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}


@code
{
    [Parameter]
    public long SpecialityId { get; set; }

    public Speciality Speciality { get; set; } = new();

    public List<Subject> Subjects { get; set; } = new();

    public string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var speciality = await context.Speciality.FirstOrDefaultAsync(x => x.Id == SpecialityId);
        if (speciality is null)
        {
            return;
        }
        Speciality = speciality;
        Subjects = await context.Subject.Where(x => x.SpecialityId == SpecialityId).ToListAsync();
    }

    private bool Filter(Subject subject)
    {
        return string.IsNullOrWhiteSpace(SearchString) || subject.Code.Contains(SearchString) || subject.Name.Contains(SearchString);
    }

    private async Task RefreshAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Subjects = await context.Subject.Where(x => x.SpecialityId == SpecialityId).ToListAsync();
    }
}