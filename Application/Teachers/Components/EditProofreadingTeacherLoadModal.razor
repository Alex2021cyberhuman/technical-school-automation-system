@using Microsoft.EntityFrameworkCore
@using Application.Data
@using Application.Teachers.Forms
@using Application.Teachers.Data
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<MainDbContext> DbContextFactory

<button type="button" class="btn btn-primary" @onclick="OnOpenAsync">
    Довычитать
</button>

@if (Visible)
{
    <PageTitle>Техникум - Довычитать часы преподавания </PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Довычитать часы преподавания</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MyMonthSelector @bind-Value="Form.Month"/>
                        <MyYearSelector @bind-Value="Form.Year"/>
                        <MyTeacherLoadInput @bind-Value="Form.TeacherLoad" TeacherLoads="AllUserLoads"/>
                        <MyProofreadingTeacherDayInput Year="Form.Year" Month="Form.Month" @bind-Value="Form.Days"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Довычитать часы преподавания</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public EditProofreadingTeacherLoadForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public bool Visible { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; } = EventCallback.Empty;

    [Parameter]
    public long CurrentUserId { get; set; }

    [Parameter]
    public Func<Task<List<TeacherLoad>>> GetAllUserLoadsAsync { get; set; } = null!;

    public List<TeacherLoad> AllUserLoads { get; set; } = new();

    [Parameter]
    public ProofreadingTeacherLoad ProofreadingTeacherLoad { get; set; } = null!;

    private void OnCancel()
    {
        Visible = false;
    }

    private async Task OnOpenAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        AllUserLoads = await GetAllUserLoadsAsync();
        Form = new EditProofreadingTeacherLoadForm(ProofreadingTeacherLoad);
        EditContext = new EditContext(Form);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible || !EditContext.Validate())
            return;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var load = await context.ProofreadingTeacherLoad.FirstOrDefaultAsync(x => x.Id == ProofreadingTeacherLoad.Id);
        if (load is null)
        {
            OnCancel();
            return;
        }
        Form.ToProofreadingTeacherLoad(load);
        await context.SaveChangesAsync();
        OnCancel();
        await OnSubmit.InvokeAsync();
    }
}