@using Application.Specialities.Data
@using Microsoft.EntityFrameworkCore
@using Application.Data
@using Application.Teachers.Forms
@using Application.Teachers.Data
@using Application.Groups.Data
@using Microsoft.Extensions.Localization
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject IStringLocalizer StringLocalizer

<button type="button" class="btn btn-primary" @onclick="OnOpenAsync">
    Изменить
</button>

@if (Visible)
{
    <PageTitle>@Title</PageTitle>
    <div class="modal fade show" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="OnCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="EditContext">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <MySubjectSelector Subjects="Subjects" Required="true" ValueChanged="OnSubjectChangedAsync"/>
                        <MyGroupSelector @bind-Value="Form.Group" Groups="Groups" Required="true"/>
                        <MudField Label="Тип">
                            <strong>@StringLocalizer[Form.Group.FinanceEnrolmentType.ToString()]</strong>
                        </MudField>
                        <MyEnumSelector TValue="TeacherLoadKind" @bind-Value="Form.Kind" Label="Характер" Required="true"/>
                        <MySemesterInput @bind-Value="Form.Semesters"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Изменить нагрузку</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{

    public string Title { get; set; } = string.Empty;

    public EditTeacherLoadForm Form { get; set; } = null!;

    public EditContext EditContext { get; set; } = null!;

    public bool Visible { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; } = EventCallback.Empty;

    [Parameter]
    public long CurrentUserId { get; set; }

    [Parameter]
    public TeacherLoad TeacherLoad { get; set; } = null!;

    public List<Group> Groups { get; set; } = null!;

    public List<Subject> Subjects { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Title = $"Изменить нагрузку {TeacherLoad.Subject.Name} {TeacherLoad.Group.Name}";
    }

    private void OnCancel()
    {
        Visible = false;
        Form = new EditTeacherLoadForm(TeacherLoad);
        EditContext = new EditContext(Form);
    }

    private async Task OnOpenAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Form = new EditTeacherLoadForm(TeacherLoad);
        Subjects = await context.GetSubjectsWithSpecialitiesAsync();
        EditContext = new EditContext(Form);
        Groups = await context.GetGroupsBySubjectAsync(Form.Subject);
        Visible = true;
    }

    private async Task OnSubmitAsync()
    {
        if (!Visible || !EditContext.Validate())
            return;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var load = await context.TeacherLoad.FirstOrDefaultAsync(x => x.Id == TeacherLoad.Id);
        if (load is null)
        {
            OnCancel();
            return;
        }
        Form.ToTeacherLoad(load);
        await context.SaveChangesAsync();
        OnCancel();
        await OnSubmit.InvokeAsync();
    }

    private async Task OnSubjectChangedAsync(Subject subject)
    {
        Form.Subject = subject;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Groups = await context.GetGroupsBySubjectAsync(Form.Subject);
        if (Groups.Any())
        {
            Form.Group = Groups.FirstOrDefault(x => x.Id == Form.Group.Id) ?? Groups.First();
        }
    }
}