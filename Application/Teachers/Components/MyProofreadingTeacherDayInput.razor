@using Application.Teachers.Forms
@inherits MudBaseInput<List<Application.Teachers.Forms.ProofreadingTeacherDayForm>>
<MudField Label="Часы в день">
    <div class="row justify-content-between">
        @for (var index = 0; index < Value.Count; index++)
        {
            var currentIndex = index;
            var day = Value[index];
            var label = $"{day.Number}";
            <div class="col-sm-4 col-lg-2">
                <MudNumericField T="int" Label="@label" ValueChanged="@(async value => await SetValueAsync(currentIndex, value))" Min="0" Max="24"/>
            </div>
        }
    </div>
</MudField>
<ValidationSummary/>

@code
{
    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    private (int Year, int Month) CurrentYearMonthTuple { get; set; } = (-1, -1);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var (month, year) = CurrentYearMonthTuple;
        if (Month == month && Year == year)
        {
            return;
        }
        Value = ProofreadingTeacherDayForm.GetZeroHourDaysByMonth(Month, Year, Value);
    }

    private async Task SetValueAsync(int index, int value)
    {
        Value[index].Hours = value;
        await ValueChanged.InvokeAsync(Value);
    }
}