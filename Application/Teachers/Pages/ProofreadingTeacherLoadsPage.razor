@page "/proofreading"
@using Application.Access.Enums
@using Application.Teachers.Data
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using Application.Data
@using Application.Teachers.Services.MonthProofreadingTeacherLoads
@using Application.Teachers.Services.ProofreadingTeacherLoadVacancies
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Policy = PolicyIdentifiers.Teachers)]
@inject IStringLocalizer StringLocalizer
@inject IDbContextFactory<MainDbContext> DbContextFactory
@inject ProofreadingTeacherLoadVacanciesCreator ProofreadingTeacherLoadVacanciesCreator
@inject MonthProofreadingTeacherLoadsCreator MonthProofreadingTeacherLoadsCreator
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<PageTitle>Техникум - Вычитка часов преподования </PageTitle>
<h3>Вычитка часов преподования</h3>

<CreateProofreadingTeacherLoadModal CurrentUserId="CurrentUserId" OnSubmit="RefreshAsync" GetAllUserLoadsAsync="GetAllUserLoadsAsync"/>
<MudTable T="ProofreadingTeacherLoad" Hover="true" SortLabel="Сортировать по" Items="Loads" Filter="Filter" Class="py-2">
    <ToolBarContent>
        <MyMonthSelector @bind-Value="SelectedMonth"/>
        <MyYearSelector @bind-Value="SelectedYear"/>
        <MudTextField @bind-Value="SearchString" Placeholder="Поиск нагрузки" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        <MudButtonGroup Color="Color.Primary">
            <MudButton>Доп.</MudButton>
            <MudMenu Icon="@Icons.Material.Outlined.ArrowDropDown">
                <MudMenuItem OnClick="Deselect">Все</MudMenuItem>
                <MudMenuItem OnClick="CreateProofreadingTeacherLoadVacanciesTableAsync">Печать Вакансии</MudMenuItem>
                <MudMenuItem OnClick="CreateMonthProofreadingTeacherLoadVacanciesTable">Печать Итог за месяц</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.TeacherLoad.Group.Name">Группа</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.TeacherLoad.Subject.Name">Дисциплина</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.Created">Создано</MudTableSortLabel>
        </MudTh>
        <MudTh>
            Тип
        </MudTh>
        <MudTh>
            Характер
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.Month">Месяц</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.Year">Год</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="ProofreadingTeacherLoad" SortBy="load => load.TotalHours">Итого</MudTableSortLabel>
        </MudTh>
        <MudTh>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Группа">
            @context.TeacherLoad.Group.Name
        </MudTd>
        <MudTd DataLabel="Дисциплина">
            @context.TeacherLoad.Subject.Name
        </MudTd>
        <MudTd DataLabel="Создано">
            @context.Created.ToLocalTime()
        </MudTd>
        <MudTd DataLabel="Тип">
            @StringLocalizer[context.TeacherLoad.Group.FinanceEnrolmentType.ToString()]
        </MudTd>
        <MudTd DataLabel="Характер">
            @StringLocalizer[context.TeacherLoad.Kind.ToString()]
        </MudTd>
        <MudTd DataLabel="Характер">
            @context.Month
        </MudTd>
        <MudTd DataLabel="Характер">
            @context.Year
        </MudTd>
        <MudTd DataLabel="Характер">
            @context.TotalHours
        </MudTd>
        <MudTd>
            <EditProofreadingTeacherLoadModal OnSubmit="RefreshAsync" CurrentUserId="CurrentUserId" ProofreadingTeacherLoad="@context" GetAllUserLoadsAsync="GetAllUserLoadsAsync"/>
            <DeleteProofreadingTeacherLoadModal OnSubmit="RefreshAsync" ProofreadingTeacherLoad="@context"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    public List<ProofreadingTeacherLoad> Loads { get; set; } = new();

    public long CurrentUserId => long.TryParse(CurrentUser?.FindFirstValue(ClaimTypes.NameIdentifier), out var id) ? id : 0;

    public ClaimsPrincipal? CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    public string SearchString { get; set; } = string.Empty;

    public int SelectedMonth { get; set; }

    public int SelectedYear { get; set; }

    public List<TeacherLoad> AllUserLoads { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationStateTask;
        CurrentUser = state.User;
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        Loads = await context.GetProofreadingTeacherLoadsAsync(CurrentUserId);
    }

    public bool Filter(ProofreadingTeacherLoad load)
    {
        return (SelectedMonth == default || load.Month == SelectedMonth) &&
               (SelectedYear == default || load.Year == SelectedYear) &&
               (string.IsNullOrWhiteSpace(SearchString) ||
                load.TeacherLoad.Group.Name.Contains(SearchString) ||
                load.TeacherLoad.Subject.Name.Contains(SearchString) ||
                load.TeacherLoad.Subject.Code.Contains(SearchString) ||
                StringLocalizer[load.TeacherLoad.Kind.ToString()].ToString().Contains(SearchString) ||
                StringLocalizer[load.TeacherLoad.Group.FinanceEnrolmentType.ToString()].ToString().Contains(SearchString));
    }

    private async Task<List<TeacherLoad>> GetAllUserLoadsAsync()
    {
        if (AllUserLoads.Any())
            return AllUserLoads;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        AllUserLoads = await context.GetTeacherLoadsAsync(CurrentUserId);
        return AllUserLoads;
    }

    private async Task CreateProofreadingTeacherLoadVacanciesTableAsync()
    {
        if (SelectedMonth == default || SelectedYear == default)
        {
            _ = await DialogService.ShowMessageBox("Ошибка", "Выберите месяц и год");
            return;
        }
        var loads = Loads.Where(x => x.Year == SelectedYear && x.Month == SelectedMonth).ToList();
        if (!loads.Any())
        {
            _ = await DialogService.ShowMessageBox("Ошибка", "Нет нагрузок на данный период");
            return;
        }
        var fileName = await ProofreadingTeacherLoadVacanciesCreator.CreatePackageAsync(
            SelectedMonth,
            SelectedYear,
            CurrentUser.FindFirstValue(ClaimTypes.GivenName) ?? CurrentUser.FindFirstValue(ClaimTypes.Name),
            loads);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + fileName, true);
    }

    private async Task CreateMonthProofreadingTeacherLoadVacanciesTable()
    {
        if (SelectedMonth == default || SelectedYear == default)
        {
            _ = await DialogService.ShowMessageBox("Ошибка", "Выберите месяц и год");
            return;
        }
        var loads = Loads.Where(x => x.Year == SelectedYear && x.Month == SelectedMonth).ToList();
        if (!loads.Any())
        {
            _ = await DialogService.ShowMessageBox("Ошибка", "Нет нагрузок на данный период");
            return;
        }
        var fileName = await MonthProofreadingTeacherLoadsCreator.CreatePackageAsync(
            SelectedMonth,
            SelectedYear,
            CurrentUser.FindFirstValue(ClaimTypes.GivenName) ?? CurrentUser.FindFirstValue(ClaimTypes.Name),
            loads);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + fileName, true);
    }

    private void Deselect()
    {
        SelectedMonth = default;
        SelectedYear = default;
        SearchString = string.Empty;
    }

}